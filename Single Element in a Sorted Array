C++

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int n = nums.size();
        int xr{};
        
        for(auto num: nums)
            xr = xr^num;
        
        return xr;
    }
};

or

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size()-2; 
        
        while(low <= high){
            
            int mid = low + (high-low)/2;
            
			// If we are on left side, move right
            if(nums[mid] == nums[mid^1]) low = mid+1;
			// if we are on right side, move left
            else high = mid-1;
        }
        
        return nums[low];
    }
};

Java

class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums.length==1) return nums[0];
        int l = 0;
        int h = nums.length-1;
        
        while(l<h){
            int mid = l+(h-l)/2;      // divide the array
            
            if(nums[mid]==nums[mid+1]) mid = mid-1;      //two same elements should be in same half
            
            if((mid-l+1)%2!=0) h = mid;            // checking the length of left half. If its is odd then update ur right pointer to mid
            
            else l = mid+1;    // else your right half will be odd then update your left pointer to mid+1
        }
        
        return nums[l];     //left pointer will have the answer at last
    }
}

Python

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        counts = defaultdict(int)
        for num in nums:
            counts[num] += 1
        for num, count in counts.items():
            if count == 1:
                return num
        return -1  # this will never be reached
		# return Counter(nums).most_common()[-1][0]  # one-liner, but TC O(nlogn)

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        val, seen = -1, True
        for num in nums:
            if val == num:
                seen = True
            elif seen:
                val = num
                seen = False
            else:
                return val
        return -1  # this will never be reached

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        for i in range(0, len(nums)-1, 2):  # pairwise comparison
            if nums[i] != nums[i+1]:  # found the single element
                return nums[i]
        return nums[-1]  # the last element is the single element

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        result = 0
        for i in range(len(nums)):
            if i%2:  # alternate between +ve and -ve
                result -= nums[i]
            else:
                result += nums[i]
        return result
		# return sum((-1)**i*v for i,v in enumerate(nums))  # one-liner

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        result = 0
        for num in nums:
            result ^= num
        return result
        # return reduce(xor, nums)  # one-liner

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        result = nums[0]
        for i in range(1, len(nums), 2):
            result += nums[i+1]-nums[i]
        return result
		# return nums[0] + sum(nums[i+1]-nums[i] for i in range(1, len(nums), 2))  # one-liner

or

class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        result = nums[0]
        for i in range(1, len(nums), 2):
            result ^= nums[i]^nums[i+1]
        return result
        # return reduce(lambda x,i: x^nums[i]^nums[i+1], range(1, len(nums), 2), nums[0])  # one-liner

