Java

class CombinationIterator {

    PriorityQueue<String> pq = new PriorityQueue<>();
    public CombinationIterator(String characters, int combinationLength) {
        generateComb(characters, combinationLength, 0, new StringBuilder());
    }
    public String next() {
        return pq.poll();
    }
    public boolean hasNext() {
        return !pq.isEmpty();
    }
    private void generateComb(String ch, int len, int st, StringBuilder sb){
        if(len == 0){
            pq.add(sb.toString());
            return;
        }
        for(int i=st; i<=ch.length()-len; i++){
            sb.append(ch.charAt(i));
            generateComb(ch, len-1, i+1, sb);
            sb.deleteCharAt(sb.length()-1);
        }
    }
}

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator obj = new CombinationIterator(characters, combinationLength);
 * String param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */
 
 C++
 
class CombinationIterator {
public:
    CombinationIterator(string characters, int combinationLength) : 
                n(characters.size()), comb_len(combinationLength), chars(characters) {
        bitmask = (1 << n) - 1;
    }
    
    string next() {
        while (bitmask >= 0 && countSet(bitmask) != comb_len) bitmask--;
        
        string res = "";
        for (int i = 0; i < n; i++) {
            if (bitmask & (1 << (n - i - 1))) res += chars[i];
        }
        
        bitmask--;
        return res;
    }
    
    bool hasNext() {
        while (bitmask >= 0 && countSet(bitmask) != comb_len) bitmask--;
        return bitmask >= 0;
    }
    
    int countSet(int mask) {
        int count = 0;
        while (mask) {
            count += mask & 1;
            mask >>= 1;
        }
        return count;
    }
    
private:
    int bitmask, n, comb_len;
    string chars;
};

/**
 * Your CombinationIterator object will be instantiated and called as such:
 * CombinationIterator* obj = new CombinationIterator(characters, combinationLength);
 * string param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */

or

class CombinationIterator {
public:
    void backtrack(string curr, string chars, int n, int start) {
        if (curr.size() == n) {
            combs.push_back(curr);
            return;
        }
        
        for (int i = start; i < chars.size(); i++) {
            curr.push_back(chars[i]);
            backtrack(curr, chars, n, i+1);
            curr.pop_back();
        }
    }
    
    CombinationIterator(string characters, int combinationLength) {
        backtrack("", characters, combinationLength, 0);
    }
    
    string next() {
        return combs[i++];
    }
    
    bool hasNext() {
        return i < combs.size();
    }
    
private:
    vector<string> combs;
    int i = 0;
};

Python

class CombinationIterator:
    def __init__(self, characters: str, combinationLength: int):
        self.allCombinations = list(combinations(characters, combinationLength))
        self.count = 0

    def next(self) -> str:
        self.count += 1
        return "".join(self.allCombinations[self.count-1])
        
    def hasNext(self) -> bool:
        return self.count < len(self.allCombinations)

# Your CombinationIterator object will be instantiated and called as such:
# obj = CombinationIterator(characters, combinationLength)
# param_1 = obj.next()
# param_2 = obj.hasNext()
