Java

class Solution{
    public int rob(TreeNode root) {
        if (root == null) return 0;

        int ans = 0;
		
		// max value from left grandchildren
        if (root.left != null) {
            ans += rob(root.left.left) + rob(root.left.right);
        }
		
		// max value from right grandchildren
        if (root.right != null) {
            ans += rob(root.right.left) + rob(root.right.right);
        }

        return Math.max(ans + root.val, rob(root.left) + rob(root.right));  //(Case1,Case2)
    }
}

or

class Solution{
    public int rob(TreeNode root) {
        return rob(root, new HashMap<>());
    }

    public int rob(TreeNode root, Map<TreeNode, Integer> map) {
        
        if (root == null) return 0;

        if (map.containsKey(root)) return map.get(root);

        int ans = 0;

        if (root.left != null) {
            ans += rob(root.left.left, map) + rob(root.left.right, map);
        }

        if (root.right != null) {
            ans += rob(root.right.left, map) + rob(root.right.right, map);
        }

        ans = Math.max(ans + root.val, rob(root.left, map) + rob(root.right, map));
        map.put(root, ans);

        return ans;
    }
}

or

class Solution {
    public int rob(TreeNode root) {
        int ans[] = robHouse(root);
        return Math.max(ans[0],ans[1]);
    }
    
    public int[] robHouse(TreeNode root){
        if(root==null){
            return new int[2];
        }
        
        int left[] = robHouse(root.left);
        int right[] = robHouse(root.right);
        
        int ans[] = new int[2];
        
        ans[0] = Math.max(left[0],left[1])+Math.max(right[0],right[1]);
        ans[1] = root.val+left[0]+right[0];
        
        return ans;
    }
}
