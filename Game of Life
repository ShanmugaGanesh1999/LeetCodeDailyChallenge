(python)
def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        def isValid(pos, board):
            i, j = pos[0], pos[1]
            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] == 0:
                return False
            return True
        
        def neighboursAlive(board, i, j):
            positions = [(i-1, j), (i+1, j), (i, j+1), (i, j-1), (i-1, j+1), (i+1, j+1), (i-1, j-1), (i+1, j-1)]
            neighbours = 0
        
            for pos in positions:
                if isValid(pos, board):
                    neighbours += 1
            return neighbours
            
        row, col = len(board), len(board[0])
        newState = [[board[i][j] for j in range(col)] for i in range(row)]
        for i in range(row):
            for j in range(col):
                neighbours = neighboursAlive(board, i, j)
                if board[i][j] == 0:
                    if neighbours == 3:
                        newState[i][j] = 1
                else:
                    if 2 <= neighbours <= 3:
                        newState[i][j] = 1
                    else:
                        newState[i][j] = 0
        
        for i in range(row):
            for j in range(col):
                board[i][j] = newState[i][j]
                
                
(java)
class Solution {
    // TC : O(n*m)
    // SC : O(1)
    private int[][] directions = new int[][]{{0,1}, {1,0}, {-1, 0}, {0,-1},{-1,-1},{-1,1},{1,-1},{1,1}};
    
    public void gameOfLife(int[][] board) {
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] == 1){
                    int activeNeigh = getActiveNeigh(board, i,j);
                    if(activeNeigh <2 || activeNeigh >3){
                        board[i][j] =-2; // 0
                    }
                } else if(board[i][j] ==0){
                     int activeNeigh = getActiveNeigh(board, i,j);
                     if(activeNeigh == 3){
                        board[i][j] = -1; // will become active in next state
                    }
                }
            }
        }
        updateBoard(board);
        return;
    }
    
    private void updateBoard(int[][] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j] ==-2){
                    board[i][j] = 0;
                }
                if(board[i][j] ==-1){
                    board[i][j] = 1;
                }
            }
        }
    }
    
    private int getActiveNeigh(int[][] board, int row, int col){
        int activeNeigh = 0;
        for(int[] direction : directions){
            int newRow = row + direction[0];
            int newCol = col + direction[1];
            
            if(newRow >=0 && newRow<board.length && newCol>=0 && newCol<board[0].length && (board[newRow][newCol] ==1 || board[newRow][newCol] == -2)){
                activeNeigh++;   
            }
        }
        return activeNeigh;
    }    
}
