Java

class Solution {
    public boolean canReach(int[] arr, int start) {
        if(start<0 || start>=arr.length || arr[start]<0){
            return false;
        }
        if(arr[start]==0){
            return true;
        }
        arr[start] = -arr[start];
        
        boolean ans1 = canReach(arr,start+arr[start]);
        boolean ans2 = canReach(arr,start-arr[start]);
        
        arr[start]=-arr[start];// change data back to orginal 
        return ans1||ans2;
        
    }
}

C++

class Solution {
public:
    bool canReach(vector<int>& arr, int start) {
        if(start<0 || start>=arr.size() || arr[start]<0){
            return false;
        }
        if(arr[start]==0) return true;
        
        arr[start]= -arr[start];
        
        bool ans1 =  canReach(arr,start+arr[start]);
        bool ans2 =  canReach(arr,start-arr[start]);
        
        arr[start]= -arr[start];// change data back to orginal 
        
        return ans1 || ans2;
        
        
    }
};

Python

class Solution(object):
    def canReach(self, arr, start):
        if(start<0 or start>=len(arr) or arr[start]<0):
            return False
        
        if(arr[start]==0):
            return True
        
        arr[start]=-arr[start]
        ans1 =  self.canReach(arr,start+arr[start])
        ans2 =  self.canReach(arr,start-arr[start])
        
        arr[start] =  -arr[start] # change data back to orginal 
        
        return ans1 or ans2
