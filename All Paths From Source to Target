Java

class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        temp.add(0);
        dfs(graph,ans,temp,0);
        return ans;
    }
    
   public void dfs(int[][] graph, List<List<Integer>> ans, List<Integer> temp, int start){
       
        if(start == graph.length-1){
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i : graph[start]){
            temp.add(i);
            dfs(graph,ans,temp,i);
            temp.remove(temp.size()-1);  
        }
        
    }
}

or

class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
        List<List<Integer>> ans = new ArrayList<>();
        
        Queue<List<Integer>> q = new LinkedList<>();
        
        
        List<Integer> currList = new ArrayList<>();
        currList.add(0);
        
        q.add(currList);
        
        while(!q.isEmpty()) {
            currList = q.poll();
             
            int v = currList.get(currList.size() - 1);
            if(v == graph.length - 1) {
                ans.add(currList);
                continue;
            }
            
            for(int i : graph[v]) {
                List<Integer> temp = new ArrayList<>(currList);
                temp.add(i);
                q.add(temp);
            }
        }
        return ans;
  }    
 }
 
 C++
 
 class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& G) {
        vector<vector<int>> ans;
        queue<vector<int>> q;
        q.push({0});                                                   // starting node of every path
        while(size(q)) {
            auto path = move(q.front()); q.pop();
            if(path.back() == size(G)-1) ans.push_back(move(path));    // found valid path
            else
                for(auto child : G[path.back()]) {                     // try every possible next node in path
                    path.push_back(child);
                    q.push(path);                                      // push path into queue for further exploration
                    path.pop_back();
                }
        }
        return ans;
    }
};

Python

class Solution:
    def allPathsSourceTarget(self, G):
        ans, q = [], deque([[0]])
        while q:
            path = q.pop()
            if path[-1] == len(G)-1: ans.append(path)
            else:
                for child in G[path[-1]]:
                    q.append(path + [child])
        return ans
