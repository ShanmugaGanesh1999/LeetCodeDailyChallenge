/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        ArrayList<ListNode> dq = new ArrayList<ListNode>();
        ListNode p = head.next;
        while (p != null) {
            dq.add(p);
            p = p.next;
        }
        p = head;
        while (dq.size() > 0) {
            p.next = dq.get(dq.size() - 1);
            p = p.next;
            dq.remove(dq.size() - 1);
            if (dq.size() > 0) {
                p.next = dq.get(0);
                p = p.next;
                dq.remove(0);
            }
        }
        p.next = null;
    }
}

or

class Solution {
    public void reorderList(ListNode head) {
        if (head.next == null) return;
        // step 1: find the middle pointer of the linked list
        ListNode slow = head, fast = head;
        while (fast.next != null && fast.next.next!= null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode mid = slow.next;
        slow.next = null;

        // step 2: reverse the last half linked list
        ListNode p = mid, q = mid.next, pp = null, qq = null;
        mid.next = null;
        while (q != null) {
            pp = p;
            p = q;
            q = q.next;
            p.next = pp;
        }
        mid = p;

        // step 3: merge first half and reversed last half
        p = head;
        q = mid;
        while (q != null) {
            pp = p; qq = q;
            p = p.next; q = q.next;
            pp.next = qq; qq.next = p;
        }
    }
}
