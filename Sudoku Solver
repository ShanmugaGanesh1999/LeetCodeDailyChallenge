C++

class Solution {
public:
    vector<pair<int, int>> emptyCells;
    int rows[9] = {}, cols[9] = {}, boxes[9] = {};
    void solveSudoku(vector<vector<char>>& board) {
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                if (board[r][c] == '.') {
                    emptyCells.emplace_back(r, c);
                } else {
                    int val = board[r][c] - '0';
                    int boxPos = (r / 3) * 3 + (c / 3);
                    rows[r] |= 1 << val;
                    cols[c] |= 1 << val;
                    boxes[boxPos] |= 1 << val;
                }
            }
        }
        backtracking(board, 0);
    }
    bool backtracking(vector<vector<char>>& board, int i) {
        if (i == emptyCells.size()) return true; // Check if we filled all empty cells?

        int r = emptyCells[i].first, c = emptyCells[i].second, boxPos = (r / 3) * 3 + c / 3;
        for (int val = 1; val <= 9; ++val) {
            if (getBit(rows[r], val) || getBit(cols[c], val) || getBit(boxes[boxPos], val)) continue; // skip if that value is existed!
            board[r][c] = ('0' + val);
            int oldRow = rows[r], oldCol = cols[c], oldBox = boxes[boxPos]; // backup old values
            rows[r] |= 1 << val;
            cols[c] |= 1 << val;
            boxes[boxPos] |= 1 << val;
            if (backtracking(board, i + 1)) return true;
            rows[r] = oldRow; // backtrack
            cols[c] = oldCol; // backtrack
            boxes[boxPos] = oldBox; // backtrack
        }
        return false;
    }
    int getBit(int x, int k) {
        return (x >> k) & 1;
    }
};

Java

class Solution {
    List<int[]> emptyCells = new ArrayList<>();
    int[] rows = new int[9], cols = new int[9], boxes = new int[9];
    public void solveSudoku(char[][] board) {
        for (int r = 0; r < 9; r++) {
            for (int c = 0; c < 9; c++) {
                if (board[r][c] == '.') {
                    emptyCells.add(new int[]{r, c});
                } else {
                    int val = board[r][c] - '0';
                    int boxPos = (r / 3) * 3 + (c / 3);
                    rows[r] |= 1 << val;
                    cols[c] |= 1 << val;
                    boxes[boxPos] |= 1 << val;
                }
            }
        }
        backtracking(board, 0);
    }
    boolean backtracking(char[][] board, int i) {
        if (i == emptyCells.size()) return true; // Check if we filled all empty cells?

        int r = emptyCells.get(i)[0], c = emptyCells.get(i)[1], boxPos = (r / 3) * 3 + c / 3;
        for (int val = 1; val <= 9; ++val) {
            if (hasBit(rows[r], val) || hasBit(cols[c], val) || hasBit(boxes[boxPos], val)) continue; // skip if that value is existed!
            board[r][c] = (char) ('0' + val);
            int oldRow = rows[r], oldCol = cols[c], oldBox = boxes[boxPos]; // backup old values
            rows[r] |= 1 << val;
            cols[c] |= 1 << val;
            boxes[boxPos] |= 1 << val;
            if (backtracking(board, i + 1)) return true;
            rows[r] = oldRow; // backtrack
            cols[c] = oldCol; // backtrack
            boxes[boxPos] = oldBox; // backtrack
        }
        return false;
    }
    boolean hasBit(int x, int k) {
        return ((x >> k) & 1) == 1;
    }
}

Python

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        def getBit(x, k): return (x >> k) & 1
        def setBit(x, k): return (1 << k) | x
        def clearBit(x, k): return ~(1 << k) & x

        rows, cols, boxes = [0] * 9, [0] * 9, [0] * 9
        emptyCells = []
        for r in range(9):
            for c in range(9):
                if board[r][c] == ".":
                    emptyCells.append([r, c])
                else:
                    val = int(board[r][c])
                    boxPos = (r // 3) * 3 + (c // 3)
                    rows[r] = setBit(rows[r], val)
                    cols[c] = setBit(cols[c], val)
                    boxes[boxPos] = setBit(boxes[boxPos], val)

        def backtracking(i):
            if i == len(emptyCells): return True  # Check if we filled all empty cells?

            r, c = emptyCells[i]
            boxPos = (r // 3) * 3 + c // 3
            for val in range(1, 10):
                if getBit(rows[r], val) or getBit(cols[c], val) or getBit(boxes[boxPos], val): continue  # skip if that value is existed!
                board[r][c] = str(val)
                rows[r] = setBit(rows[r], val)
                cols[c] = setBit(cols[c], val)
                boxes[boxPos] = setBit(boxes[boxPos], val)
                if backtracking(i + 1): return True
                rows[r] = clearBit(rows[r], val)
                cols[c] = clearBit(cols[c], val)
                boxes[boxPos] = clearBit(boxes[boxPos], val)
            return False

        backtracking(0)

or

class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        board_state = BoardState()     
        board_state.init_board(board)

        def backtracking(curr, board_state):
            if curr == (len(board[0]) * len(board)):
                return True
            
            i, j = curr // len(board), curr % len(board)
            
            if board[i][j] != '.':
                return backtracking(curr+1, board_state)

            for intended in range(1, 10):
                if board_state.valid_step(i, j, intended):
                    board_state.set_board(i, j, intended)
                    res = backtracking(curr+1, board_state)
                    if res: # we have found a result already
                        board[i][j] = str(intended)
                        return True
                    board_state.clear_board(i, j, intended)

            return False
        
        backtracking(0, board_state)
        return

We define a class called board stste, which can help us to know if we can put the number to the place, there are multiple ways to implement it:

Bit masking:

class BoardState:
    def __init__(self):
        self.cells = [0] * 9
        self.rows = [0] * 9
        self.cols = [0] * 9
    
    def get_bit(self, x, i):
        return x & (1 << i)
        
    def set_bit(self, x, i):
        return x | (1 << i)
        
    def clear_bit(self, x, i):
        return x & ~(1 << i)
		
    def init_board(self, board):
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] != '.':
                    val = int(board[i][j])
                    self.set_board(i, j, val)  
        
    def valid_step(self, i, j, val):
        cell_id = i // 3 * 3 + j // 3
        col_mask = self.get_bit(self.cols[j], val)
        row_mask = self.get_bit(self.rows[i], val)
        cell_mask = self.get_bit(self.cells[cell_id], val)
        return (col_mask | row_mask | cell_mask) == 0
        
    def set_board(self, i, j, val):
        cell_id = i // 3 * 3 + j // 3
        self.cols[j] = self.set_bit(self.cols[j], val)
        self.rows[i] = self.set_bit(self.rows[i], val)
        self.cells[cell_id] = self.set_bit(self.cells[cell_id], val)

Hashset

class BoardState:
    def __init__(self):
        self.cells = [set() for _ in range(9)]
        self.rows = [set() for _ in range(9)]
        self.cols = [set() for _ in range(9)]
	
    def init_board(self, board):
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] != '.':
                    val = int(board[i][j])
                    self.set_board(i, j, val)  
        
    def valid_step(self, i, j, val):
        cell_id = i // 3 * 3 + j // 3
        in_col = val in self.cols[j]
        in_row = val in self.rows[i]
        in_cell = val in self.cells[cell_id]
        return (in_col or in_row or in_cell) == False
        
    def set_board(self, i, j, val):
        cell_id = i // 3 * 3 + j // 3
        self.cols[j].add(val)
        self.rows[i].add(val)
        self.cells[cell_id].add(val)
            
    def clear_board(self, i, j, val):
        cell_id = i // 3 * 3 + j // 3
        self.cols[j].remove(val)
        self.rows[i].remove(val)
        self.cells[cell_id].remove(val)

Instead of using masking method, we can also use the original board without extra space

class BoardState:
    def __init__(self):
        pass
	
    def init_board(self, board):
        self.board = board
        
    def valid_step(self, i, j, val):
        # search for same row
        cell_sx = i // 3 * 3
        cell_sy = j // 3 * 3
        val = str(val)
        for x in range(9):
            cell_cx = cell_sx + x // 3
            cell_cy = cell_sy + x % 3
            if self.board[x][j] == val or\
                self.board[i][x] == val or \
                self.board[cell_cx][cell_cy] == val:
                return False
        return True     
        
    def set_board(self, i, j, val):
        self.board[i][j] = str(val)
            
    def clear_board(self, i, j, val):
        self.board[i][j] = '.'
