Java

class Solution {
public int calculateMinimumHP(int[][] grid) {
    int n = grid.length;
    int m = grid[0].length;
    
    int dp[][] = new int[n][m];
    for(int i=n-1; i>=0; i--){
        for(int j=m-1; j>=0; j--){
            if(i==n-1 && j==m-1){
                dp[i][j] = Math.max(1, 1 - grid[i][j]);
            }
            else if(i==n-1){
                dp[i][j] = Math.max(1, dp[i][j+1] - grid[i][j]);
            }
            else if(j==m-1){
                dp[i][j] = Math.max(1, dp[i+1][j] - grid[i][j]);
            }
            else{
                dp[i][j] = Math.max(1, Math.min(dp[i][j+1], dp[i+1][j]) - grid[i][j]);
            }
        }
    }
    
    return dp[0][0];
    }
}

C++

class Solution {
public:
    int m, n;
    int calculateMinimumHP(vector<vector<int>>& grid) {
        m = grid.size(); n = grid[0].size();
        int left = 1, right = 1000 * (m+n) + 1, ans = right;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (isGood(grid, mid)) {
                ans = mid;
                right = mid - 1;
            } else left = mid + 1;
        }
        return ans;
    }
    bool isGood(vector<vector<int>>& grid, int initHealth) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = initHealth + grid[0][0];
        for (int r = 0; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                if (r > 0 && dp[r-1][c] > 0)
                    dp[r][c] = max(dp[r][c], dp[r-1][c] + grid[r][c]);
                if (c > 0 && dp[r][c-1] > 0)
                    dp[r][c] = max(dp[r][c], dp[r][c-1] + grid[r][c]);
            }
        }
        return dp[m-1][n-1] > 0;
    }
};

Python

class Solution:
    def calculateMinimumHP(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        def isGood(initHealth):
            dp = [[0] * n for _ in range(m)]
            dp[0][0] = initHealth + grid[0][0]
            for r in range(m):
                for c in range(n):
                    if r > 0 and dp[r-1][c] > 0:
                        dp[r][c] = max(dp[r][c], dp[r-1][c] + grid[r][c])
                    if c > 0 and dp[r][c-1] > 0:
                        dp[r][c] = max(dp[r][c], dp[r][c-1] + grid[r][c])
            return dp[m-1][n-1] > 0
        
        left = 1
        right = 1000 * (m + n) + 1
        ans = right
        while left <= right:
            mid = left + (right - left) // 2
            if isGood(mid):
                ans = mid
                right = mid - 1
            else:
                left = mid + 1
        return ans
        
or

class Solution:
    def calculateMinimumHP(self, dungeon: List[List[int]]) -> int:
        m,n = len(dungeon), len(dungeon[0])
        
        # cache the states
        @lru_cache(None)
        def dp(x,y):
            
            # FOR BASE CASE:
            if x == m-1 and y==n-1:
                # if last element is negative, then i've to be one more than its abs value
                # else if its positive, i've to be 1 because that's the least health i can have
                return max(1, -dungeon[x][y] + 1)
            
            # FOR THE CURRENT STATE I'M IN i.e., (x,y):
            
            # initially set answer to infinity for the (x,y) state that we'll find out
            ans = float("inf")
            
            # there are two moves possible, 
            # so get answers from both the directions i.e., left and down
            # take the minimum answer from both of them in each direction
            
            # DOWN:
            if x+1 < m:
                ans = min(ans, dp(x+1, y))
            # LEFT:
            if y+1 < n:
                ans = min(ans, dp(x, y+1))
                
            # now you've the minimum answer required to go to left or down, 
            # so we now calculate the total answer required by considering the state we are 
            # currently in
            
            # since you are currently at a point, you'd have to add the negative of current value 
            # to simulate the value i should have before hand to enter this current point
            # so negate the value and add (subracting basically)
            
            # for example if current value is -6 then i need 7 to come to this point
            # but if the current value is 8 then i virtually need 0 to come to this point
            
            ans += -dungeon[x][y]
            
            # again if your ans is +ve, then it means you'd need atleast *ans* health to enter 
            # this current point
            # else if its negative, then it means you actually need no health to even enter because 
            # of the positive orbs in the subsequent points.
            # so since i added the negative, i need to return the max of 1 and the ans at the end
            return max(1, ans)
            
        # start the recursion from top
        return dp(0,0)
