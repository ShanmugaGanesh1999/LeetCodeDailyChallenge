Java:-

class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> list = new ArrayList<>();
        list.add(0);
        for(int i = 0; i < n; i++) {
            int s = 1 << i;
            for(int j = list.size() - 1; j >= 0; j--) list.add(s + list.get(j));
        }
    return list;
}   
}

Python:-

class Solution:
    def grayCode(self, n: int) -> List[int]:
        ans = []
        for i in range(0, 2 ** n):
            b = bin(i)[2:]
            temp = b[0]
            for j in range(1, len(b)):
                temp += str(int(b[j - 1]) ^ int(b[j]))
            ans.append(temp)
        
        return list(map(lambda x: int(x, 2), ans))
 
C++:-

class Solution {
public:
    vector<int> grayCode(int n) {
        vector<int> res = {0};
        int size;
        
        for (int i = 0; i < n; i++) {
            size = res.size();
            for (int j = size - 1; j >= 0; j--) {
                res.push_back(res[j] | 1 << i);
            }
        }
        return res;
    }
};

or

class Solution {
public:
    vector<int> grayCode(int n) {
        if(n == 1) return vector<int>{0,1};
        vector<int>prev = grayCode(n-1);
        
        for(int i=prev.size()-1;i>=0;i--)
            prev.push_back(prev[i]+pow(2,n-1));
        
        return prev;
    }
};
