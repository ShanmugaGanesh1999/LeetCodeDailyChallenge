Java

class Solution {
   public int maxSubArray(int[] nums) {
       int sum = 0;
       int maxSum = Integer.MIN_VALUE;
       for(int  i =0;i<nums.length;i++){
           sum+=nums[i];
           maxSum =  Math.max(maxSum,sum);
           if(sum<0){
               sum = 0;
           }
       }
           return maxSum;
       
   }
}

or

class Solution {
  public int maxSubArray(int[] nums) {
    
        return helper(nums,0,nums.length-1);
    }
    
    public int helper(int nums[],int i,int j){

        if(i==j){
            return nums[i];
        }
                          
        int mid  =  (i+j)/2;
        int sum = 0,leftMax = Integer.MIN_VALUE;
        
        for(int l =  mid;l>=i;l--){
            sum+=nums[l];
            if(sum>leftMax){
                leftMax =  sum;
            }                                    
        }
        
     int rightMax = Integer.MIN_VALUE;
        sum = 0;    // reset sum to 0
        for (int l = mid + 1; l <=j; l++)
        {
            sum += nums[l];
            if (sum > rightMax) {
                rightMax = sum;
            }
        }
        
       int maxLeftRight = Math.max(helper(nums, i, mid),
                                    helper(nums, mid + 1, j ));
        return Math.max(maxLeftRight, leftMax + rightMax);
        
        
    
    }
}

or

class Solution {
  public int maxSubArray(int[] nums) {
   int storage []=  new int[nums.length];
   int max  =  nums[0];
   storage[0 ] =  nums[0];
   for( int i=1;i<nums.length ;i++  ){
       storage[i] =  Math.max( storage[i-1]+nums[i] ,  nums[i]);
       if(storage[i]>max){
           max=  storage[i];
       }
   }
   return max;    
     }
}

C++

class Solution {
public:
    int maxSubArray(vector<int>& nums) {    
        vector<vector<int>> dp(2, vector<int>(size(nums), -1));
        return solve(nums, 0, false, dp);
    }
    int solve(vector<int>& A, int i, bool mustPick, vector<vector<int>>& dp) {
        if(i >= size(A)) return mustPick ? 0 : -1e5;
        if(dp[mustPick][i] != -1) return dp[mustPick][i];
        if(mustPick)
            return dp[mustPick][i] = max(0, A[i] + solve(A, i+1, true, dp));
        return dp[mustPick][i] = max(solve(A, i+1, false, dp), A[i] + solve(A, i+1, true, dp));
    }
};

Python

class Solution:
    def maxSubArray(self, nums):
        @cache
        def solve(i, must_pick):
            if i >= len(nums): return 0 if must_pick else -inf
            return max(nums[i] + solve(i+1, True), 0 if must_pick else solve(i+1, False))
        return solve(0, False)
