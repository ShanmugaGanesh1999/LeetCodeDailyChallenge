Java

class Solution {
    class UnionFind {
        int[] parent;
        int[] weight;
        
        public UnionFind(int num) {
            parent = new int[num];
            weight = new int[num];
            
            for(int i =  0; i < num; i++) {
                parent[i] = i;
                weight[i] = 1;
            }
        }
        
        public void union(int a, int  b) {
            int rootA = root(a);
            int rootB = root(b);
            
            if (rootA == rootB) {
                return;
            }
            
            if (weight[rootA] > weight[rootB]) {
                parent[rootB] = rootA;
                weight[rootA] += weight[rootB];
            } else {
                parent[rootA] = rootB;
                weight[rootB] += weight[rootA];
            }
        }
        
        public int root(int a) {
            if (parent[a] == a) {
                return a;
            }
            
            parent[a] = root(parent[a]);
            return parent[a];
        }
    }

    public List<List<String>> accountsMerge(List<List<String>> accounts) {
        int size = accounts.size();

        UnionFind uf = new UnionFind(size);

        // prepare a hash with unique email address as key and index in accouts as value
        HashMap<String, Integer> emailToId = new  HashMap<>();
        for(int i = 0; i < size; i++) {
            List<String> details = accounts.get(i);
            for(int j = 1; j < details.size(); j++) {
                String email = details.get(j);
                
				// if we have already seen this email before, merge the account  "i" with previous account
				// else add it to hash
                if (emailToId.containsKey(email)) {
                    uf.union(i, emailToId.get(email));
                } else  {
                    emailToId.put(email, i);
                }
            }
        }
        
        // prepare a hash with index in accounts as key and list of unique email address for that account as value
        HashMap<Integer, List<String>> idToEmails = new HashMap<>();
        for(String key : emailToId.keySet()) {
            int root = uf.root(emailToId.get(key));
            
            if (!idToEmails.containsKey(root)) {
                idToEmails.put(root, new ArrayList<String>());
            }
            
            idToEmails.get(root).add(key);
        }
        
        // collect the emails from idToEmails, sort it and add account name at index 0 to get the final list to add to final return List
        List<List<String>> mergedDetails =  new ArrayList<>();
        for(Integer id : idToEmails.keySet()) {
            List<String> emails =  idToEmails.get(id);
            Collections.sort(emails);
            emails.add(0, accounts.get(id).get(0));
            
            mergedDetails.add(emails);
        }
        
        return  mergedDetails;
    }
}

C++

class Solution {
public:
    void dfs(string& email) {
        seen.insert(email);
        ans.back().push_back(email);
        for(auto& adjEmail : G[email]) 
            if(!seen.count(adjEmail)) 
                dfs(adjEmail);        
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& A) {        
        for(auto& acc : A)                            
            for(int i = 2; i < size(acc); i++)              // create graph with email as nodes and,
                G[acc[i]].push_back(acc[i-1]),              // add edges between adjacent nodes of same account
                G[acc[i-1]].push_back(acc[i]);
        
        for(auto& acc : A) 
            if(!seen.count(acc[1])) {                       // If an email from a account is not previously seen,
                ans.push_back({acc[0]});                    // create new account & insert person's name
                dfs(acc[1]);                                // perform dfs to find all his emails & add it to the list
                sort(begin(ans.back())+1, end(ans.back())); // sort the emails
            }            
        
        return ans;
    }
private:
    unordered_map<string, vector<string>> G;  // adjacency list graph with email as nodes and edges between adjacent email of same account
    unordered_set<string> seen;               // to mark an email as visited in DFS
    vector<vector<string>> ans;               // final answer after merging accounts
};

Python

class Solution:
    def accountsMerge(self, A):
        G, seen, ans = defaultdict(list), set(), []

        for acc in A:
            for i in range(2,len(acc)):
                G[acc[i]].append(acc[i-1])
                G[acc[i-1]].append(acc[i])

        def dfs(email):
            seen.add(email)
            emailList = [email]
            for E in G[email]:
                if E not in seen:
                    emailList.extend(dfs(E))
            return emailList
        for acc in A:
            if acc[1] not in seen:
                ans.append([acc[0]] + sorted(dfs(acc[1])))
        return ans
