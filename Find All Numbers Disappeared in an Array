Java

class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        List<Integer> outList=new ArrayList<>();
        
        HashMap<Integer,Integer> map=new HashMap<>();
        
//adding element of array into HashMap
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])==true){
                map.put(nums[i],map.get(nums[i])+1);
            }else{
                 map.put(nums[i],1);
            }
        }
        
// checking whether all the integers in the range [1, n] present in HasMap or not 
// if not present then add that elemrnt into List
        for(int i=1;i<=nums.length;i++){
             if(map.containsKey(i)==false){
                 outList.add(i);
             } 
        }
      return outList;
    }
}

C++

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        sort(begin(nums), end(nums));
        vector<int> ans;
        for(int i = 1; i <= size(nums); i++) 
            if(!binary_search(begin(nums), end(nums), i))   // binary search in nums for each i
                ans.push_back(i);
        return ans;
    }
};

or

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        unordered_set<int> s(begin(nums), end(nums));   // insert every nums[i] in hashset
        vector<int> ans(size(nums) - size(s));
        for(int i = 1, j = 0; i <= size(nums); i++)  
            if(!s.count(i)) ans[j++] = i;               // add all elements not found in hashset to ans
        return ans;
    }
};

or

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<bool> seen(size(nums)+1);
        vector<int> ans;
        for(auto c : nums) seen[c] = true;
        for(int i = 1; i <= size(nums); i++)
            if(!seen[i]) ans.push_back(i);
        return ans;
    }
};

or

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> ans;
        for(auto& c : nums) 
            while(nums[c-1] != c) 
				swap(c, nums[c-1]);
        for(int i = 1; i <= size(nums); i++)
            if(i != nums[i-1]) ans.push_back(i);
        return ans;
    }
};

or

class Solution {
public:
    vector<int> findDisappearedNumbers(vector<int>& nums) {
        vector<int> ans;
        for(auto c : nums)
            nums[abs(c)-1] = -abs(nums[abs(c)-1]);   // mark c is present by negating nums[c-1]
        for(int i = 0; i < size(nums); i++) 
            if(nums[i] > 0) ans.push_back(i+1);      // nums[i] > 0 means i+1 isnt present in nums
        return ans;
    }
};

Python

class Solution:
    def findDisappearedNumbers(self, nums):
        ans = []
        for c in nums:
            nums[abs(c)-1] = -abs(nums[abs(c)-1])
        for i in range(len(nums)):
            if nums[i] > 0:
                ans.append(i+1)
        return ans
