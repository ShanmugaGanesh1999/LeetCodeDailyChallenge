Java

class Solution {
	
    public static int findLUSlength(String[] strs) {
    	
    	TreeMap<String, Integer> map = new TreeMap<>(
    			new Comparator<String>() {

    				@Override
    		        public int compare(String s1, String s2) {
    		            if (s1.length() > s2.length()) {
    		                return -1;
    		            } else if (s1.length() < s2.length()) {
    		                return 1;
    		            } else {
    		                return s1.compareTo(s2);
    		            }
    		        }
    	    		
    			}
    			);
    	
    	fillMap(map, strs);
    	
    	
    	Set<String> keys = map.keySet();
    	String firstKey = keys.stream().findFirst().get();
    	if(map.get(firstKey) == 1)
    		return firstKey.length();
    	
    	for(String key1 : keys) {
    		if(map.get(key1)>1)
    			continue;
    		boolean breaked = false;
    		for(String key2 : keys) {
    			if(key1 == key2) {
    				break;
    			}
    			if(isSubsequence(key1, key2)) {
    				breaked = true;
    				break;
    			}
    		}
    		if(!breaked)
    			return key1.length();

    		
    	}    	
    	return -1;        
    }
    
    public static void fillMap(TreeMap<String, Integer> map, String[] strs) {
    	
    	for(String str : strs)
    		if(map.containsKey(str))
    			map.put(str, map.get(str)+1);
    		else
    			map.put(str, 1);   	
    	
    }
    
    public static boolean isSubsequence(String s1, String s2) {
    	int i=0;
    	int j=0;
    	StringBuilder sb = new StringBuilder("");
    	while(j<s2.length() && i<s1.length()) {
    		if(s1.charAt(i) == s2.charAt(j)) {
    			sb.append(s1.charAt(i));
    			if(sb.toString().equals(s1))
    				return true;    
    			i++;
    			
    		}
    		
    		
			j++;
    	}
    	
    	return false;
    	
    }
}

Python

class Solution:
    def findLUSlength(self, words):
        def isSubsequence(s, t):
            t = iter(t)
            return all(c in t for c in s)
 
        words.sort(key = lambda x:-len(x))
        for i, word in enumerate(words):
            if all(not isSubsequence(word, words[j]) for j in range(len(words)) if j != i): 
                return len(word)
        
        return -1


C++

class Solution {
public:
    bool check(string a,string b){
        int A = a.size();
        int B = b.size();
        while(A > 0 && B > 0)
        {
            int i = a.size() - A ;
            int j = b.size() - B ;
            if(a[i] == b[j])
            {
                A-- ;
            }
            B-- ;
        }
        return A==0;
    }
    int findLUSlength(vector<string>& strs) {
        int maxLen = -1 ;
        for(int i = 0 ; i < strs.size() ; ++i)
        {
            int currLen = strs[i].length() ;
            bool flag = true ;
            for(int j = 0 ; j < strs.size() ; ++j)
            {
                if(i != j && check(strs[i], strs[j]))
                {
                    flag = false ;
                    break ;
                }
            }
            if(flag)
            {
                maxLen = max(maxLen , currLen);
            }
        }
        return maxLen;
    }
};

or

class Solution {
public:
    int findLUSlength(vector<string>& strs) {
        unordered_map<string,int> m;
        for (auto& s: strs) 
        {
            for (int i = 0; i < (1 << s.size()); i++) {
                string t;
                for (int j = 0; j < s.size(); j++) 
                {
                    if ((i >> j) & 1) 
                        t += s[j];
                }
                m[t]++ ;
            }
        }
        int ans = -1 ;
        for (auto& a: m) {
            if (a.second == 1) 
                ans = max(ans , (int)a.first.size()) ;
        }
        return ans ;
    }
};
