IN C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int d = 0;
        height(root, d) ;
        return d;
    }
    
    int height(TreeNode* root, int &d){
        if(root == NULL) 
            return 0;
        
        int lh = height(root->left, d) ;
        int rh = height(root->right, d) ;
        d = max(d, lh + rh) ;
        
        return max(lh , rh) + 1;
    }
};

IN PYTHON

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def diameterOfBinaryTree(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.dia = 0
        
        def height(root):
            if not root: 
                return 0
            left, right = height(root.left), height(root.right)
            self.dia = max(self.dia, left + right)
            return 1 + max(left, right)
            
        height(root)
        return self.dia

IN JAVA

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int dia = 0 ;
    public int diameterOfBinaryTree(TreeNode root) {
        maxheight(root) ;
        return dia ;
    }
    private int maxheight(TreeNode root) {
        if (root == null) 
            return 0;
    
        int left = maxheight(root.left);
        int right = maxheight(root.right);    
        dia = Math.max(dia , left + right) ;
        
        return Math.max(left, right) + 1;
    }
}
