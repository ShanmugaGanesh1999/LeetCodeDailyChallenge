C++

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        stack<int> st;
        unordered_map<int, int> mp;
        for(auto x: nums2){
            while(st.size() && st.top() < x){
                mp[st.top()] = x;
                st.pop();
            }
            st.push(x);
        }
        for(auto x: nums1) ans.push_back(mp[x] ? mp[x] : -1);
        return ans;
    }
};

Java

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        int M = nums1.length, N = nums2.length;
        
        int[] greater = new int[10001];
        for(int i = N - 1; i >= 0; i--) {
            while(stack.size() > 0 && stack.peek() < nums2[i])
                stack.pop();
            greater[nums2[i]] = stack.size() == 0 ? -1 : stack.peek();
            stack.push(nums2[i]);
        }
        
        int[] result = new int[M];
        for(int i = 0; i < M; i++)
            result[i] = greater[nums1[i]];
        
        return result;
    }
}

or

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Stack<Integer> stack = new Stack<>();
        int M = nums1.length, N = nums2.length;
        
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = N - 1; i >= 0; i--) {
            while(stack.size() > 0 && stack.peek() < nums2[i])
                stack.pop();
            map.put(nums2[i], stack.size() == 0 ? -1 : stack.peek());
            stack.push(nums2[i]);
        }
        
        int[] result = new int[M];
        for(int i = 0; i < M; i++)
            result[i] = map.get(nums1[i]);
        
        return result;
    }
}

Python

class Solution:
    def nextGreaterElement(self, nums1, nums2):
        dic, stack = {}, []
        
        for num in nums2[::-1]:
            while stack and num > stack[-1]:
                stack.pop()
            if stack:
                dic[num] = stack[-1]
            stack.append(num)
            
        return [dic.get(num, -1) for num in nums1]
