class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int n = s.length();
        int m = p.length();
        List<Integer> res = new ArrayList<>();
        if (n < m) {
            return res;
        }
        int[] pmap = new int[26];
        int[] smap = new int[26];
        for (int i = 0; i < m; i++) {
            pmap[p.charAt(i) - 'a']++;
        }
        //  count of all letters in String p
        int required = m;
        //  current matching Characters
        int mCount = 0;
        //  first window of p.length()
        for (int i = 0; i < m; i++) {
            char ch = s.charAt(i);
            if (smap[ch - 'a'] < pmap[ch - 'a']) {
                mCount++;
            }
            smap[ch - 'a']++;
        }
		//  check if it is a valid substring
        if (mCount == required) {
            res.add(0);
        }
        int l = 0;
        for (int i = m; i < n; i++) {
            //  including
            char inc = s.charAt(i);
            if (smap[inc - 'a'] < pmap[inc - 'a']) {
                mCount++;
            }
            smap[inc - 'a']++;
            //  excluding
            char exc = s.charAt(l);
            smap[exc - 'a']--;
            if (smap[exc - 'a'] < pmap[exc - 'a']) {
                mCount--;
            }
            //  verifying if any necessary character eas removed or any 
            //  required character was added ....
            if (mCount == required) {
                res.add(l + 1);
            }
            l++;
        }
        return res;
    }
}
