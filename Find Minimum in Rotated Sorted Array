Java

class Solution {
    public int findMin(int[] nums) {
        int start = 0;
        int end = nums.length -1;
        
        while (start <= end){
            int mid = (start + end) /2;
            if (nums[end] < nums[mid]){
                start = mid + 1;
            } else if (nums[mid] < nums[start]){
                end = mid;
            } else {
                break;
            }
        }
        return nums[start];
        
    }
}

C++

class Solution {
public:
    int findMin(vector<int>& nums) {
        int low=0, high=nums.size()-1;
        while(low<high){
            if(nums[low]<nums[high]) return nums[low];
            int mid=low+(high-low)/2;
            if(nums[mid]>=nums[low]) low=mid+1;
            else high=mid;
        }
        return nums[low];
    }
};


or

class Solution {
public:
    int findMin(vector<int>& arr) {
        int n=arr.size();
        int l=0, r=n-1;
        while(l<=r)
        {
            int m=(l+r)/2;
            if(m-1>=0 && arr[m-1]>arr[m])
                return arr[m];
            if(m+1<n && arr[m]>arr[m+1])
                return arr[m+1];
            if(arr[0]<arr[m])
                l=m+1;
            else
                r=m-1;
        }
        return arr[0];
    }
};


Python

class Solution:    
    def findMin(self, nums):
        def dfs(start, end):
            if end - start <=  1:
                return min(nums[start], nums[end])

            mid = (start + end)//2
            if nums[end] < nums[mid]:
                return dfs(mid + 1, end)
            elif nums[end] > nums[mid]:
                return dfs(start, mid)

        return dfs(0, len(nums) - 1)
        
        
