Python

class Solution:
    def minWindow(self, s, t):
        beg, end = 0, 0
        ans, found = (float("inf"), 0), 0
        cnt_t, cnt_s = Counter(t), Counter()
        while end <= len(s):
            if found == len(cnt_t):
                ans = min(ans, (end - beg, beg))
                old = s[beg]
                if cnt_s[old] == cnt_t[old]: found -= 1
                cnt_s[old] -= 1
                beg += 1
            else:
                if end == len(s): break
                new = s[end]
                if cnt_s[new] == cnt_t[new] - 1: found += 1
                cnt_s[new] += 1
                end += 1
        
        return s[ans[1]:ans[0]+ans[1]] if ans[0] != float("inf") else ""


Java

class Solution {
    public String minWindow(String s, String t) {
        Map<Character, Integer> map1 = new HashMap<>();
        for(char ch : t.toCharArray())
            map1.put(ch, map1.getOrDefault(ch, 0) + 1);
        Map<Character, Integer> map2 = new HashMap<>();
        int i = 0, j = 0, count = 0;
        String ans = "";
        while(j < s.length()){
            char ch = s.charAt(j);
            map2.put(ch, map2.getOrDefault(ch, 0) + 1);
            if(map1.containsKey(ch) && map1.get(ch) >= map2.get(ch))
                count++;
            while(count == t.length()){
                if(ans.equals("") || ans.length() > j - i + 1)
                    ans = s.substring(i, j + 1);
                char beg = s.charAt(i);
                if(map2.get(beg) == 1)
                    map2.remove(beg);
                else
                    map2.put(beg, map2.get(beg) - 1);
                if(map2.getOrDefault(beg, 0) < map1.getOrDefault(beg, 0))
                    count--;
                i++;
            }
            j++;
        }
        return ans;
    }
}

or

class Solution {
    public String minWindow(String s, String t) {
        int[] arr1 = new int[58];
        for(char ch : t.toCharArray())
            arr1[ch - 'A']++;
        int[] arr2 = new int[58];
        int i = 0, j = 0, count = 0, ai = 0, aj = 0, len = t.length();
        String ans = "";
        while(j < s.length()){
            int ch = s.charAt(j) - 'A';
            if(arr1[ch] >= ++arr2[ch])
                count++;
            while(count == len){
                if(aj == ai || aj - ai > j - i + 1){
                    ai = i;
                    aj = j + 1;
                }
                int beg = s.charAt(i) - 'A';
                if(--arr2[beg] < arr1[beg])
                    count--;
                i++;
            }
            j++;
        }
        return s.substring(ai, aj);
    }
}

or

class Solution {
    
    //Returns whether the window in S (represented by sCount) has all the characters in T.
    boolean isValid(int[] sCount, int[] tCount) {
        for (int i = 0; i < sCount.length; ++i)
            if (sCount[i] < tCount[i])
                return false;
        return true;
    }
    
    //Returns the index for a given character, for lookup in our array.
    int getIndex(char c) {
        return Character.isUpperCase(c) ? c - 'A' : c - 'a' + 26;
    }
    
    public String minWindow(String s, String t) {
        //Size is 52 because we need 26*2 space to accomodate both lowercase and uppercase characters.
        int[] sCount = new int[52], tCount = new int[52];
        
        //Build char count array for T.
        for (int i = 0; i < t.length(); ++i)
            tCount[getIndex(t.charAt(i))]++;
        
        //resStart, resEnd store the start and end of the best result so far (smallest valid substring).
        int left = 0, right = 0, resStart = -1, resEnd = -1;
        //Initialize sCount, since the starting position of the window is at the first char.
        sCount[getIndex(s.charAt(right))]++;
        
        while (left < s.length() && right < s.length()) {
            //If current window in S contains all chars in T
            if (isValid(sCount, tCount)) {
                //Store the start and end of the current substring.
                if (resStart == -1 || (right - left < resEnd - resStart)) {
                    resStart = left;
                    resEnd = right;
                }
                //Move the left boundary of the window towards the right.
                sCount[getIndex(s.charAt(left++))]--;
            }
            //Current window in S does not contain all required characters. Need to expand towards right.
            else {
                //If the right boundary is already at the last character, then cannot move.
                if (right == s.length() - 1)
                    break;
                //Move the right boundary of the window towards the right.
                sCount[getIndex(s.charAt(++right))]++;
            }
        }
        
        return resStart == -1 ? "" : s.substring(resStart, resEnd + 1);
    }
}

C++

class Solution {
public:
    string minWindow(string s, string t) {
        int len = INT_MAX,start = 0,j=0,count=t.length();
        vector<int> now(125);
        for(auto c:t)
            now[c]++;
        for(int i=0;i<s.length();i++){
            if(now[s[i]]>0)
                count--;
            now[s[i]]--;
            while(!count and i>=j){
                if(i-j+1<len){
                    len = i - j + 1;
                    start = j;
                }
                now[s[j]]++;
                if(now[s[j++]]>0)
                    count++;
            }
            
        }
        return (len==INT_MAX)?"":s.substr(start,len);
    }
};

or

class Solution {
public:
    string minWindow(string s, string t) {
        int n = s.length();
        int m = t.length();
        int fp[256] = {0};
        int fs[256] = {0};
        for(int i=0;i<m;i++){
            fp[t[i]]++;
        }
        
        int i=0, j=0;
        int min_so_far = INT_MAX;
        int cnt = 0;
        int window_size = 0;
        int start = -1;
        while(j<n){
            char ch = s[j];
            fs[ch]++;
            if(fp[ch] != 0 and fs[ch]<=fp[ch]){
                cnt++;
            }
            if(cnt==m){
                while(fp[s[i]] == 0 or fs[s[i]] > fp[s[i]]){
                    fs[s[i]]--;
                    i++;
                }
                window_size = j-i+1;
                if(window_size < min_so_far){
                    min_so_far = window_size;
                    start = i;
                }                
            }
            j++;
        }
        if(start == -1){
            return "";
        }
        return s.substr(start, min_so_far);
    }
};
