Pyhton:-

from sortedcontainers import SortedList
    
class Solution:
    def maxSumSubmatrix(self, M, k):
        def countRangeSum(nums, U):
            SList, ans = SortedList([0]), -float("inf")
            for s in accumulate(nums):
                idx = SList.bisect_left(s - U) 
                if idx < len(SList): ans = max(ans, s - SList[idx])        
                SList.add(s)
            return ans
        
        m, n, ans = len(M), len(M[0]), -float("inf")
        
        for i, j in product(range(1, m), range(n)):
            M[i][j] += M[i-1][j]
                
        M = [[0]*n] + M
        
        for r1, r2 in combinations(range(m + 1), 2):
            row = [j - i for i, j in zip(M[r1], M[r2])]
            ans = max(ans, countRangeSum(row, k))
            
        return ans
        
        
Java:-

class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
            return 0;
        int maxSum = Integer.MIN_VALUE;
        for(int i = 0; i<matrix[0].length;i++){
            int[] sum = new int[matrix.length];
            for(int m = i; m<matrix[0].length;m++){
                for(int j = 0; j<matrix.length;j++){
                    sum[j]+=matrix[j][m];
                    if(sum[j]==k)return  k;  
                    if(sum[j]<k)maxSum=Math.max(maxSum,sum[j]);
                }
                for(int j = 0; j<matrix.length;j++){
                    int summe=0;    
                    for(int n = j; n<matrix.length;n++){
                        summe+=sum[n];
                        if(summe==k)return k;
                        if(summe<k)maxSum=Math.max(maxSum,summe);
                    }
                }
            }
        }
        
        return maxSum;
 
    }
}

C++:-

class Solution {
public:
    int best_cumulative_sum(vector<int> ar,int N,int K) 
    { 
        set<int> cumset; 
        cumset.insert(0); 

        int best=INT_MIN,cum=0; 

        for(int i=0;i<N;i++) 
        { 
            cum+=ar[i]; 
            set<int>::iterator sit=cumset.lower_bound(cum-K); 
            if(sit!=cumset.end())best=max(best,cum-*sit); 
            cumset.insert(cum); 
        } 
        return best;
    }
    
    int maxSumSubmatrix(vector<vector<int>>& matrix, int k) {
        
        vector<vector<int>>& premat(matrix);
        for(int i=0;i<premat.size();i++)
        for(int j=1;j<premat[i].size();j++)
            premat[i][j]=premat[i][j]+premat[i][j-1];
        int res=INT_MIN;
        for(int l=0;l<matrix[0].size();l++)
        for(int r=l;r<matrix[0].size();r++)
        {
            vector<int>temp;
            for(int i=0;i<matrix.size();i++)
            {
                int t=0;
                if(l>0)
                    t=premat[i][l-1];
                temp.push_back(premat[i][r]-t);
            }
            res=max(res,best_cumulative_sum(temp,temp.size(),k));
        }
        return res;
        
    }
};

Go:-

func maxSumSubmatrix(matrix [][]int, k int) int {
    m, n := len(matrix), len(matrix[0])
    maxSum := math.MinInt32

    for i:=0; i<m; i++ {
        for j:=1;j<n; j++{
            matrix[i][j] += matrix[i][j-1]
        }
    }
    for l:=0; l<n; l++ {
        for r:=l; r < n; r++ {
            prefixSum, set := 0, Set{0}
            for i:=0; i< m; i++ {
                sum := matrix[i][r]
                if l > 0 {
                    sum -= matrix[i][l-1]
                }
                prefixSum += sum
                idx := sort.SearchInts(set, prefixSum-k)
                if idx != len(set) {
                    maxSum = max(maxSum, prefixSum-set[idx])
                }
                set.Insert(prefixSum)
            }
        }
    }
    
    return maxSum
}

type Set []int

func (s *Set) Insert(x int) {
	i := sort.SearchInts(*s, x)
	if i == len(*s) {
		*s = append(*s, x)
	} else if (*s)[i] != x {
		*s = append(*s, 0)
		copy((*s)[i+1:], (*s)[i:])
		(*s)[i] = x
	}
}

func max(a, b int) int {
    if a < b {
        return b
    }
    return a
}
