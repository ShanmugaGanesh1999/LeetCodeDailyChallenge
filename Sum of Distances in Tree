C++

class Solution {
public:
	vector<vector<int>> tree;
	map<pair<int,int>,int> m;
	map<pair<int,int>,int> under;

	pair<int,int> getDfs(int i,int p) {

		int ans=0,c=1;
		for(int j: tree[i]) {
			if(j==p) continue;
			if(m.find({i,j})==m.end()) {
				auto p= getDfs(j,i);
				m[{i,j}]=p.first;
				under[{i,j}]=p.second;
			}
			ans+= m[{i,j}]+under[{i,j}];
			c+=under[{i,j}];
		}
		return {ans,c};
	}

	vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
		m.clear();
		under.clear();

		tree.resize(n);
		vector<int> ans;
		for(auto i: edges) {
			tree[i[0]].push_back(i[1]);
			tree[i[1]].push_back(i[0]);
		}

		for(int i=0;i<n;i++) {
			ans.push_back(getDfs(i,-1).first);
		}
		return ans;
	}
};

Java

class Solution {
    public int[] sumOfDistancesInTree(int n, int[][] edges) {
        // parent_sum - closer_nodes + further_nodes
        
         ArrayList<Integer> graph[] = new ArrayList[n];
         for(int i =0;i<n;i++) graph[i] = new ArrayList();
        
         for(int edge[] : edges){
             int u = edge[0];
             int v = edge[1];
             graph[u].add(v);
             graph[v].add(u);
         }
         
         int closer_nodes_count[] = new int[n];
         int ans[] = new int[n];
         boolean visited[] = new boolean[n];
         dfs(0,graph,ans,closer_nodes_count,visited); // populate closer_nodes_count and ans[0]
         
         visited = new boolean[n];
         dfs2(0,graph,ans,closer_nodes_count,visited); // calculate ans for all nodes by using ans[0] as base
         return ans;
    }
    private void dfs2(int u , ArrayList<Integer> graph[] , int ans[] , int closer_nodes_count[],boolean visited[]){
        visited[u] = true;
        for(int v : graph[u]){
            if(!visited[v]){
                ans[v] = ans[u] - closer_nodes_count[v] + (visited.length-closer_nodes_count[v]);
                dfs2(v,graph,ans,closer_nodes_count,visited);
            }
        }
    }
    private int dfs(int u , ArrayList<Integer> graph[] , int ans[] , int closer_nodes_count[],boolean visited[]){
        
        int closer_nodes = 1;
        visited[u] = true;
        for(int v : graph[u]){
            if(!visited[v]){
                int child_nodes_count =dfs(v,graph,ans,closer_nodes_count,visited);
                closer_nodes+=child_nodes_count;
                ans[0]+=child_nodes_count;
            }
        }
        
        closer_nodes_count[u] = closer_nodes;
        return closer_nodes;
    }
}

Python

(Python 2)
class Solution:
    def sumOfDistancesInTree(self, N, edges):
        G = defaultdict(set)
        for i, j in edges:
            G[i].add(j)
            G[j].add(i)
        
        def dfs(node, parent, depth):
            ans = 1
            for neib in G[node]:
                if neib != parent:
                    ans += dfs(neib, node, depth + 1)
            weights[node] = ans
            depths[node] = depth
            return ans
        
        def dfs2(node, parent, w):
            ans[node] = w
            for neib in G[node]:
                if neib != parent:
                    dfs2(neib, node, w + N - 2*weights[neib])
        
        weights, depths, ans = [0]*N, [0]*N, [0]*N
        dfs(0, -1, 0)
        dfs2(0, -1, sum(depths))
        
        return ans
        
        
or

class Solution:
    
    def count_lower(self, u, p):
        """
        Assuming 0 as root, set count[i] = number of nodes below node i, including node i
        """
        ans = 0
        for v in self.adj[u]:
            if v != p:
                ans += self.count_lower(v, u)
        self.count[u] = 1+ans
        return 1+ans    # Add 1 to include node u
    
    def solve_0(self, u, p, d):
        """
        Find the answer for node 0
        """
        self.ans[0] += d
        for v in self.adj[u]:
            if v != p:
                self.solve_0(v, u, d+1)
        
    def dfs(self, u, p):
        """
        Calculate the answer for other nodes reusing answer for previous node
        """
        self.ans[u] = self.ans[p] + self.n - 2*self.count[u]
        for v in self.adj[u]:
            if v != p:
                self.dfs(v, u)
        
    def sumOfDistancesInTree(self, n: int, edges: List[List[int]]) -> List[int]:
        
        self.adj = [[] for i in range(n)]
        self.n = n
        for e in edges:
            self.adj[e[0]].append(e[1])
            self.adj[e[1]].append(e[0])
        
        self.count = [0]*n
        self.count_lower(0, -1) # start at node 0
        # print(self.count)
        
        self.ans = [0]*n
        
        self.solve_0(0, -1, 0) # Solve for node 0
        
		# Solve for all other nodes using the answer for its parent
        for i in self.adj[0]:
            self.dfs(i, 0)
        
        return self.ans
