C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if (root == nullptr) return nullptr;
        root->left = pruneTree(root->left); // Set new root.left
        root->right = pruneTree(root->right); // Set new root.right
        if (root->val == 1 || root->left != nullptr or root->right != nullptr) return root; // Check if current subtree contain 1 or not?
        return nullptr; // If not, return None
    }
};

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pruneTree(self, root: TreeNode) -> TreeNode:
        if root == None: return root
        root.left = self.pruneTree(root.left)  # Set new root.left
        root.right = self.pruneTree(root.right)  # Set new root.right
        if root.left != None or root.right != None or root.val == 1:  # Check if current subtree contain 1 or not?
            return root
        return None  # If not, return None

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution
{
    public TreeNode pruneTree(TreeNode root)
    {
        if(root == null)
        {
            return null;
        }
       
        TreeNode left = pruneTree(root.left);
        
        TreeNode right = pruneTree(root.right);
    
        if(left == null)
        {
            root.left = null;
        }
        
        if(right == null)
        {
            root.right = null;
        }
        
        if(root.val == 1 || left != null || right != null)
        {
            return root;
        }
        
        return null;
    }
    
}

C

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


int max(int a,int b)
{
    if(a>b)
        return a;
    return b;
}
int check(struct TreeNode*t)
    {
        if(!t)
            return 0;
        int l=check(t->left);
        int r=check(t->right);
        if(l==0)
            t->left=NULL;
        if(r==0)
            t->right=NULL;
        return max(l,max(r,t->val));
    }
struct TreeNode* pruneTree(struct TreeNode* root){


        int r=check(root);
        if(r==0)
            root=NULL;
        return root;
}
