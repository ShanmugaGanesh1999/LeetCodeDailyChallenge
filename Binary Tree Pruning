C++

class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if (root == nullptr) return nullptr;
        root->left = pruneTree(root->left); // Set new root.left
        root->right = pruneTree(root->right); // Set new root.right
        if (root->val == 1 || root->left != nullptr or root->right != nullptr) return root; // Check if current subtree contain 1 or not?
        return nullptr; // If not, return None
    }
};

Python

class Solution:
    def pruneTree(self, root: TreeNode) -> TreeNode:
        if root == None: return root
        root.left = self.pruneTree(root.left)  # Set new root.left
        root.right = self.pruneTree(root.right)  # Set new root.right
        if root.left != None or root.right != None or root.val == 1:  # Check if current subtree contain 1 or not?
            return root
        return None  # If not, return None

Java

class Solution
{
    public TreeNode pruneTree(TreeNode root)
    {
        if(root == null)
        {
            return null;
        }
       
        TreeNode left = pruneTree(root.left);
        
        TreeNode right = pruneTree(root.right);
    
        if(left == null)
        {
            root.left = null;
        }
        
        if(right == null)
        {
            root.right = null;
        }
        
        if(root.val == 1 || left != null || right != null)
        {
            return root;
        }
        
        return null;
    }
    
}
