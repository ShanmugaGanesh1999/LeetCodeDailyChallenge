Python1:-

class Solution:
    def minRefuelStops(self, target, fuel, s):
        heap = [] 
        s = [(0, 0)] + s + [(target, 0)]
        n, ans = len(s), 0
        
        for i in range(1, n):
            fuel -= s[i][0] - s[i-1][0]
            while heap and fuel < 0:
                fuel -= heappop(heap)
                ans += 1
            if fuel < 0: return -1
            heappush(heap, -s[i][1])
            
        return ans
        
Python2:-

class Solution:
    def minRefuelStops(self, target, startFuel, s):
        s = [[0, startFuel]] + s + [[target, 0]]
        n = len(s)
        t = [(s[i-1][0] - s[i][0], s[i-1][1] + s[i-1][0] - s[i][0]) for i in range(1, n)]
        dp = [[-float("inf")] * n for _ in range(n)]
        dp[0][0] = 0
        
        for i in range(1, n):
            for j in range(1, i+1):
                cand = max(dp[i-1][j] + t[i-1][0], dp[i-1][j-1] + t[i-1][1])
                if cand >= 0: dp[i][j] = cand
        
        for i, elem in enumerate(dp[-1]):
            if elem >= 0: return i - 1
                    
        return -1

Cpp:-

class Solution {
public:
    // TIME COMPLEXITY:- O(NLOG(N))
    // SPACE COMPLEXITY:- O(N)
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations)
    {
        priority_queue<int> Fuels; // to keep track of gases being untaken in non increasing order
        stations.push_back({target,0});
        int max_reachable=startFuel,ans=0;
        for(int i=0;i<stations.size();i++){
            // refuel your vehicle till max_reachable becomes atleast current station coordinate
            while(!Fuels.empty() and max_reachable<stations[i][0]){
                ans++;
                max_reachable+=Fuels.top();
                Fuels.pop();
            }
            // if still max_reachable is not atleast current station coordinate, output -1
            if(max_reachable<stations[i][0])
                return -1;
            Fuels.push(stations[i][1]);
        }
        return ans;
    }
};


Java:-


public int minRefuelStops(int target, int startFuel, int[][] stations) {
        int n = stations.length;
        int position = startFuel;
        int count = 0;
        //a PriorityQueue to store all reachable stations
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> b[1] - a[1]);

        for(int i = 0; i <= n; i++) {
            int[] station = i == n ? new int[] {target, 0} : stations[i];
            //when find a station can not reach, get previous station with largest amount of gas and refill
            while(!pq.isEmpty() && position < station[0]) {
                position += pq.poll()[1];
                count ++;
            }
            //only add reachable station
            if(position >= station[0]) {
                pq.add(station);
            }
        }

        if(position < target)
            return -1;
        return count;
    }
