class Solution {
    public boolean winnerSquareGame(int n) {
        HashMap<Integer, Boolean> map = new HashMap<>();
        return winnerUtil(n, map);
    }
    private boolean winnerUtil(int n, HashMap<Integer, Boolean> map) {
        // base case
        if(n<=0)
            return false;
        
        if(map.containsKey(n))
            return map.get(n);
        
        // main logic
        for(int i=1;i*i<=n;i++) {
            // The move Alice makes = i*i
            int opponent = n-i*i;
            if(!winnerUtil(opponent, map))
            {
                map.put(n, true);
                return true;
            }
        }
        map.put(n, false);
        return false;
    }
}

or

class Solution {
    public boolean winnerSquareGame(int n) {
        boolean[]dp = new boolean[n+1];
        // dp[0] = false;
        for(int i=1;i<n+1;i++) {
            for(int j=1;j*j<=i;j++) {
                if(!dp[i-j*j]) {
                    dp[i] = true;
                    break;
                }
            }
        }
        return dp[n];
    }
}

or

class Solution {
    public boolean winnerSquareGame(int n) {
        return winnerUtil(n);
    }
    private boolean winnerUtil(int n) {
        // base case
        if(n<=0)
            return false;
        
        // main logic
        for(int i=1;i*i<=n;i++) {
            // The move Alice makes = i*i
            int opponent = n-i*i;
            if( ! winnerUtil(opponent) )
                return true;
        }
        return false;
    }
}
