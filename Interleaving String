Pyhton:-

class Solution:
    def isInterleave(self, s1, s2, s3):
        @lru_cache(None)
        def dp(i, j):
            if i == -1 and j == -1: return True
            return (j >= 0 and dp(i, j-1) and s2[j] == s3[i+j+1]) or (i >= 0 and dp(i-1,j) and s1[i] == s3[i+j+1])
        
        return len(s1) + len(s2) == len(s3) and dp(len(s1) - 1, len(s2) - 1)

Java:-

public class Solution {
    public boolean isinter(String s1, int i, String s2, int j, String s3, int k, int[][] memo) {
        if (i == s1.length()) {
            return s2.substring(j).equals(s3.substring(k));
        }
        if (j == s2.length()) {
            return s1.substring(i).equals(s3.substring(k));
        }
        if (memo[i][j] > -1) {
            return memo[i][j] == 1 ? true : false;
        }
        boolean ans = false;
        if (s3.charAt(k) == s1.charAt(i) && isinter(s1, i + 1, s2, j, s3, k + 1, memo)
                || s3.charAt(k) == s2.charAt(j) && isinter(s1, i, s2, j + 1, s3, k + 1, memo)) {
            ans = true;
        }
        memo[i][j] = ans ? 1 : 0;
        return ans;
    }
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s1.length() + s2.length() != s3.length()) {
            return false;
        }
        int memo[][] = new int[s1.length()][s2.length()];
        for (int i = 0; i < s1.length(); i++) {
            for (int j = 0; j < s2.length(); j++) {
                memo[i][j] = -1;
            }
        }
        return isinter(s1, 0, s2, 0, s3, 0, memo);
    }
}

C++:-

//dp

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        #define S1 (dp[i-1][j] && s1[i-1] == s3[i+j-1])
        #define S2 (dp[i][j-1] && s2[j-1] == s3[i+j-1])
        
        int n = s1.size(), m = s2.size(), k = s3.size();
        if (n + m != k) return false;
        vector<vector<bool>> dp(n+1, vector<bool>(m+1, 0));
        
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;
            }
        }

        return dp[n][m];
    }
};

// 1d array

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        #define S1 (dp[j] && s1[i-1] == s3[i+j-1])
        #define S2 (dp[j-1] && s2[j-1] == s3[i+j-1])
        
        int n = s1.size(), m = s2.size(), k = s3.size();
        if (n + m != k) return false;
        vector<bool> dp(m+1, 0);
        
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[j] = (i==0 && j==0) ? true : i==0 ? S2 : j==0 ? S1 : S1 || S2;
            }
        }

        return dp[m];
    }
};
