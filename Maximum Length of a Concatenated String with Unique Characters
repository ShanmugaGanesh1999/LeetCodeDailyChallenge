C++

class Solution {
public:
    string ans="";

bool isValid(string s1, string s2)
{
    unordered_map<char,int> mp;
    string t=s1+s2;
    for(int i=0;i<t.size();i++)
    {
        if(mp.find(t[i])!=mp.end())
            return false;
        mp[t[i]]++;
    }
    return true;
}

void max_uni(vector<string>& arr,int i,string temp)
{
    if(i==arr.size())
    {
        if(temp.size()>ans.size())
            ans=temp;
        return;
    }
    
    if(isValid(temp,arr[i]))
    {
        max_uni(arr,i+1,temp+arr[i]);
    }
    
    max_uni(arr,i+1,temp);
}

int maxLength(vector<string>& arr) {
    int i=0;
    string temp="";
    max_uni(arr,i,temp);
    return ans.size();
}
};

Java

class Solution {
        List<Set<Character>> sets = new ArrayList<>();
        int maxLength = 0;
    public int maxLength(List<String> arr) {
        // to make sure that terms with existing letters are not considered
        // keep track of seen letters
        // because all need to be unique, use a set
        // if two sets are disjoint, then combine them, or not
        for(String a : arr){
            Set<Character> curr = new HashSet<>();
            for(char c : a.toCharArray()){
                curr.add(c);
            }
            sets.add(curr);
        }
        tryConcatenations(arr, 0, new HashSet<>());
        
        return maxLength;
    }
    
    private void tryConcatenations(List<String> arr, int index, Set<Character> currentSet){
        // update maxLength to current if greater
        maxLength = Math.max(maxLength, currentSet.size());
        if(index >= arr.size()){
            return;
        }
        
        for(int i = index; i < arr.size(); i++){
            // check if the string itself contains repeated characters
            if(arr.get(i).length() != sets.get(i).size())
                continue;
            // take this string and split its characters (done in global "sets")
            // if there is any character in current sequence then don't add
            boolean repeats = false;
            for(char c : sets.get(i)){
                if(currentSet.contains(c)){
                    repeats = true;
                    break;
                }
            }
            // if unique characters then proceed
            if(!repeats){
                Set<Character> nextSet = new HashSet<>(currentSet);
                nextSet.addAll(sets.get(i));
				// calling the function with the current string added
                tryConcatenations(arr, i+1, nextSet);
            }
        }
        // the case where the current string is not added will be considered in all further iterations of this loop
    }
}

Python

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        n = len(arr)
        ans = 0
        for mask in range(1 << n):
            seen = set()
            isGood = True
            size = 0
            for i in range(n):
                if (mask >> i) & 1 == 0: continue
                for c in arr[i]:
                    if c in seen:
                        isGood = False
                        break
                    seen.add(c)
                    size += 1
            if isGood and size > ans:
                ans = size
        return ans
