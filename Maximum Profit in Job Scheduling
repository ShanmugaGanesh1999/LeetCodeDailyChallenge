Java

class Solution {
    
    class JOB{
        int startTime;
        int endTime;
        int profit;
        
        public JOB(int startTime , int endTime , int profit)
        {
            this.startTime = startTime;
            this.endTime = endTime;
            this.profit = profit;
        }
    }
    
     int[] memo = new int[50001];
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        Arrays.fill(memo, -1);
        List<JOB> list = new ArrayList<>();
        
        for(int i =0 ; i < endTime.length ; ++i)
        {
            list.add(new JOB(startTime[i],endTime[i],profit[i]));      
        }
        
        Collections.sort(list , (a1,a2) -> a1.startTime - a2.startTime);
      
        
       
        return recursive(list, 0, 0 );
        
    }
    
    private int recursive(  List<JOB>  list, int previousEnd , int counter )
    {
        
        
        
        
        
        
            while(counter < list.size() && list.get(counter).startTime < previousEnd)
            {
                counter++;
            }
        
            if(counter >= list.size())
            return 0;
        
        if (memo[counter] != -1) {
            return memo[counter];
        }
        
            
        
            int maxProfit =  Math.max(list.get(counter).profit + recursive( list, list.get(counter).endTime, counter+1),recursive(list, previousEnd, counter+1));
                
         return memo[counter] = maxProfit;
        
    }
}

or

class Solution {
    
    class JOB{
        int startTime;
        int endTime;
        int profit;
        
        public JOB(int startTime , int endTime , int profit)
        {
            this.startTime = startTime;
            this.endTime = endTime;
            this.profit = profit;
        }
    }
    
    
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        List<JOB> list = new ArrayList<>();
        
        for(int i =0 ; i < endTime.length ; ++i)
        {
            list.add(new JOB(startTime[i],endTime[i],profit[i]));      
        }
        
        Collections.sort(list , (a1,a2) -> a1.startTime - a2.startTime);
      
        
       
        return recursive(list, 0, 0 );
        
    }
    
    private int recursive(  List<JOB>  list, int previousEnd , int counter )
    {
        
        int sumInclude = 0;
            int sumExclude =0;
        
        if(counter >= list.size())
            return 0;
        
        if(list.get(counter).startTime < previousEnd)
            return recursive( list, previousEnd, counter+1 );
        
            
        
            return Math.max(list.get(counter).profit + recursive( list, list.get(counter).endTime, counter+1),recursive(list, previousEnd, counter+1));
                
         
        
    }
}

or

class Solution {
    
    int[] memo;
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
        //approach:
        //put all in an array of arrays -> [[stTime, endTim, profit], ...]
        //sort by start times and earliest endtimes
        //loop through each entry in a recursive way
        int[][] jobs = new int[startTime.length][3];
        
        for(int i=0; i<startTime.length; i++) {
            jobs[i][0] = startTime[i];
            jobs[i][1] = endTime[i];
            jobs[i][2] = profit[i];
        }
        
        //sort this array
        Arrays.sort(jobs, (a,b) -> a[0]==b[0]? a[1]-b[1] : a[0]-b[0]);
        
        memo = new int[startTime.length+1];
        Arrays.fill(memo, -1);
        
        return dp(0, jobs);
    }
    
    public int dp(int end, int[][] jobs) {
        
        if(end==jobs.length) {
            return 0;
        }
        
        if(memo[end] != -1)
            return memo[end];
        
        //binary search for next highest startTime
        //careful, handle condition of jobs having end time greater than any start time (inside binarySearch())
        int indexOfNextStart = binSearch(jobs[end][1], jobs);
        
        //we either consider the current job or skip it
        int currMax = Math.max(dp(end+1, jobs),
                              jobs[end][2]+dp(indexOfNextStart, jobs));
        
        memo[end] = currMax;
        return memo[end];
            
    }
    
    public int binSearch(int index, int[][] jobs) {
        
        //condition to handle jobs who have an end time greater than any start time
        if(index>jobs[jobs.length-1][0])
            return jobs.length;
        
        int left = 0;
        int right = jobs.length-1;
        while(left < right) {
            int mid = left + (right-left)/2;
            if(jobs[mid][0] < index) {
                left = mid+1;
            } else {
                right = mid;
            }
        }
        return right;
    }
}

C++

class Solution {
public:
    static bool cmp(array<int,3> a,array<int,3> b)
    {
        return a[1]<b[1];
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int sz=profit.size();
        vector<int> dp(sz);
        vector<array<int,3>> v;
        
        for(int i=0;i<sz;i++)
            v.push_back({startTime[i],endTime[i],profit[i]});
			
        sort(endTime.begin(),endTime.end());
        sort(v.begin(),v.end(),cmp);
		
        dp[0]=v[0][2];
        for(int i=1;i<sz;i++){
            int pos=upper_bound(endTime.begin(),endTime.begin()+i,v[i][0])-endTime.begin();
            if(pos==0)
                dp[i]=max(dp[i-1],v[i][2]);
            else
                dp[i]=max(dp[i-1],v[i][2]+dp[pos-1]);
        }
        return dp[sz-1];   
    }
};

Python

import bisect

class Solution:
    def jobScheduling(self, S, E, profit):
        videos = sorted(list(zip(S, E, profit)))
        S = [i[0] for i in videos]
        n = len(videos)
        dp = [0] * (n + 1)
        for k in range(n-1, -1, -1):
            temp = bisect_left(S, videos[k][1])
            dp[k] = max(videos[k][2] + dp[temp], dp[k+1])
        return dp[0]
