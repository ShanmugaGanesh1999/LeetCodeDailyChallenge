Java

class Solution {
    public int numberOfArithmeticSlices(int[] nums) {
        int ans = 0;
         HashMap<Integer, Integer>[] maps = new HashMap[nums.length];
        
        for(int i=0;i<nums.length; i++){
            maps[i] = new HashMap<>();
        }
        
        for(int i=1;i<maps.length;i++){
            for(int j=0;j<i;j++){
                long cd = (long)nums[i] - (long)nums[j];
                
                if(cd<=Integer.MIN_VALUE || cd>=Integer.MAX_VALUE){
                    continue;
                }
                
                int apsEndingOnJ = maps[j].getOrDefault((int)cd, 0);
                int apsEndingOnI = maps[i].getOrDefault((int)cd, 0);
                
                ans += apsEndingOnJ;
                maps[i].put((int)cd, apsEndingOnI + apsEndingOnJ + 1);
            }
        }
        return ans;
    }
}

C++

class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        vector< unordered_map<long, long> > dp(nums.size());
        int res = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            for (int j = 0; j < i; j++) {
                long diff = (long)nums[i] - (long)nums[j];
                
                dp[i][diff]++;
                
                if (dp[j].find(diff) != dp[j].end()) {
                    dp[i][diff] += dp[j][diff];
                    res += dp[j][diff];
                }
            }
        }
        
        return res;
    }
};

Js

var numberOfArithmeticSlices = function(nums) {
  let dp = new Array(nums.length);
  for(let i = 0; i < nums.length; i++) {
    dp[i] = new Map();
  }
  let ans = 0;
  for(let j = 1; j < nums.length; j++) {
    for(let i = 0; i < j; i++) {
      let commonDifference = nums[j] - nums[i];
      if ((commonDifference > (Math.pow(2, 31) - 1)) || commonDifference < (-Math.pow(2, 31))) {
        continue;
      }
      let apsEndingAtI = dp[i].get(commonDifference) || 0
      let apsEndingAtJ = dp[j].get(commonDifference) || 0
      
      dp[j].set(commonDifference, (apsEndingAtI + apsEndingAtJ + 1));
      ans += apsEndingAtI;
    }
  }
  return ans;
};

Python

class Solution:
    def numberOfArithmeticSlices(self, A):
        total, n = 0, len(A)
        dp = [Counter() for item in A]
        for i in range(n):
            for j in range(i):
                dp[i][A[i] - A[j]] += (dp[j][A[i] - A[j]] + 1)      
            total += sum(dp[i].values())
          
        return total - (n-1)*n//2   
