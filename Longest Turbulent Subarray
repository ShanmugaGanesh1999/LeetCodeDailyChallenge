C++

class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        std::ios::sync_with_stdio(false);
        pair<int,int>prev(1,0);
        int res = 1;
        for(int i = 1; i < arr.size(); i++) {
            if(arr[i-1] > arr[i]) {
                if(prev.second >= 0)
                     prev.first = 2;
                else
                    prev.first++;  
                prev.second = 1;
            } else if(arr[i-1] < arr[i]) {
                if(prev.second < 0) 
                    prev.first = 2;
                  else
                    prev.first++;
                 prev.second = -1;
            } else {
                prev.first = 1;
                prev.second = 0;
            }
            res = max(prev.first, res);
        }        
        return res;
    }
};

or

class Solution {
public:
    int maxTurbulenceSize(vector<int>& arr) {
        int n = arr.size();
        
        vector<pair<int, int>> dp(n, pair<int, int>(1, 1));
        
        int ans = 1;
        
        for (int k = 0; k < n - 1; ++k) {
            if (k % 2 == 0) {
                if (arr[k] > arr[k + 1]) {
                    dp[k + 1].first = dp[k].first + 1;
                } else if (arr[k] < arr[k + 1]) {
                    dp[k + 1].second = dp[k].second + 1;
                }
            } else {
                if (arr[k] < arr[k + 1]) {
                    dp[k + 1].first = dp[k].first + 1;
                } else if (arr[k] > arr[k + 1]) {
                    dp[k + 1].second = dp[k].second + 1;
                }
            }
            
            ans = max(ans, max(dp[k + 1].first, dp[k + 1].second));
        }
        
        
        return ans;
    }
};

Java

class Solution {
public int maxTurbulenceSize(int[] A) {

int mx = 0, c = 0;

for(int i = 0; i < A.length; i++) {
    if(i >= 2 && ((A[i-2] > A[i-1] && A[i-1] < A[i]) ||
                  (A[i-2] < A[i-1] && A[i-1] > A[i])) ) {
        
        c++;
    } 
    else if(i >= 1 && A[i-1] != A[i]) {
        
        c = 2;
    }
    else {
        
        c = 1;
    }
    mx = Math.max(mx, c);
}
return mx;    

}
}

Js

var maxTurbulenceSize = function(arr) {
    if(arr.length < 3) {    
        return new Set(arr).size // for duplicate elements
    }
    let res = 0;
    
    for(let g=1; g<arr.length; g++){
        if( ( arr[g] > arr[g+1] && arr[g] > arr[g-1] )  // base conditions
                    ||
            ( arr[g] < arr[g+1] && arr[g] < arr[g-1] ) 
         ){
            let curMax  = 0;
            while(
                ( arr[g] > arr[g+1] && arr[g] > arr[g-1] )  // base conditions
                    ||
                ( arr[g] < arr[g+1] && arr[g] < arr[g-1] ) ){
                curMax = curMax + 1;
                g++;
            }
            res = Math.max(res, curMax)
        }
    }
    
    return new Set(arr).size == 1 ? res+1 : res + 2 // res + 2 is done +2 is left and right of first and last element of series
    
};

Python

class Solution:
    def maxTurbulenceSize(self, A):
        
        @lru_cache(None)
        def dp(i, dr):
            if i == 0 or (A[i] - A[i-1])*dr >= 0: return 1
            return dp(i-1, -dr) + 1
        
        return max(dp(i, dr) for i in range(len(A)) for dr in [-1, 1])
