Java

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int n = nums.length;
        int[] answers = new int[n];
        answers[0]=1;
        for(int i=1;i<n;i++){
            answers[i] = answers[i-1]*nums[i-1];
        }
        int last = nums[n-1];
        for(int i=n-2;i>=0;i--){
            answers[i] = answers[i]*last;
            last *= nums[i];
        }
        return answers;
    }
}

C++

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int prod = 1, zeroCnt = count(begin(nums), end(nums), 0);
        if(zeroCnt > 1) return vector<int>(size(nums));               // Case-1
        for(auto c : nums) 
            if(c) prod *= c;                                          // calculate product of all elements except 0
        for(auto& c : nums)
            if(zeroCnt) c = c ? 0 : prod;                             // Case-2
            else c = prod / c;                                        // Case-3
        return nums;
    }
};

Python

class Solution:
    def productExceptSelf(self, nums):
        prod, zero_cnt = reduce(lambda a, b: a*(b if b else 1), nums, 1), nums.count(0)
        if zero_cnt > 1: return [0]*len(nums)
        for i, c in enumerate(nums):
            if zero_cnt: nums[i] = 0 if c else prod
            else: nums[i] = prod // c
        return nums
