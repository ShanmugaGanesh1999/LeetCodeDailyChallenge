Java

class Solution {
    public int numDistinct(String s, String t) {
        int sLen = s.length();
        int tLen = t.length();
        if(tLen > sLen) return 0 ;
        int[][]dp = new int[sLen+2][tLen+2];
        for(int i = 0; i <= sLen;i++) 
            dp[i][tLen] = 1;
        for(int i = sLen-1;i>=0;i--) 
            for(int j = Math.min(tLen-1,i);j>=0;j--) {
                if(s.charAt(i) == t.charAt(j)) {
                    dp[i][j] = dp[i+1][j] + dp[i+1][j+1];
                } else {
                    dp[i][j] = dp[i+1][j];
                }
            }
        return dp[0][0];
    }
}

C++

class Solution {
public:
int numDistinct(string s, string t) {
    vector<int> dp(t.size()+1,0),dpTemp(t.size()+1,0);
    dp[t.size()]=1;
    dpTemp[t.size()]=1;
    for(int i=s.size()-1;i>=0;i--){
        for(int j=t.size()-1;j>=0;j--){
            dpTemp[j]=dp[j];
            if(s[i]==t[j]){
                long long temp1=((long long)dp[j]+(long long)dp[j+1]);
                long long temp2=2147483648LL;
                dpTemp[j]=(int)(temp1%temp2);
            }
        }
        dp=dpTemp;
    }
    return dp[0];
}
};

Python

class Solution:
    def numDistinct(self, s, t):
        @lru_cache(None)
        def dp(i, j):
            if i == -1: return j == -1
            if j == -1: return j == -1
            return dp(i-1, j) + (s[i] == t[j]) * dp(i-1, j-1)
