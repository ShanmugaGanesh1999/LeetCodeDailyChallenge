C++

class Solution { // 12 ms, faster than 9.19%
public:
    int memo[100] = {};
    int numDecodings(const string& s) {
        return dp(s, 0);
    }
    int dp(const string& s, int i) {
        if (i == s.size()) return 1;
        if (memo[i] != 0) return memo[i];
        int ans = 0;
        if (s[i] != '0') // Single digit
            ans += dp(s, i+1);
        if (i+1 < s.size() && (s[i] == '1' || s[i] == '2' && s[i+1] <= '6')) // Two digits
            ans += dp(s, i+2);
        return memo[i] = ans;
    }
};

or

class Solution { // 0 ms, faster than 100.00%
public:
    int numDecodings(const string& s) {
        int n = s.size();
        vector<int> dp(n+1, 0);
        dp[n] = 1;
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] != '0') // Single digit
                dp[i] += dp[i+1];
            if (i+1 < s.size() && (s[i] == '1' || s[i] == '2' && s[i+1] <= '6')) // Two digits
                dp[i] += dp[i+2];
        }
        return dp[0];
    }
};

or

class Solution { // 0 ms, faster than 100.00%
public:
    int numDecodings(const string& s) {
        int n = s.size(), dp = 0, dp1 = 1, dp2 = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (s[i] != '0') // Single digit
                dp += dp1;
            if (i+1 < s.size() && (s[i] == '1' || s[i] == '2' && s[i+1] <= '6')) // Two digits
                dp += dp2;
            dp2 = dp1;
            dp1 = dp;
            dp = 0;
        }
        return dp1;
    }
};

Java

class Solution {
   public int numDecodings(String s) {
        int len = s.length();
        int[] dp = new int[len+1];
        dp[len] = 1;
        dp[len-1] = s.charAt(len-1)=='0' ? 0 : 1;
		
        for(int i=len-2;i>=0;i--){  //going from the string tail towards string beginning 
            char curr = s.charAt(i);
            char prev = s.charAt(i+1);
            if(curr=='1' || curr=='2' && prev>='0' && prev<='6'){ //cases like {10xxxxxxxx ~ 19xxxxxxxx} or {20xxxxxxxxx ~ 26xxxxxxxxx}, 
                dp[i] = dp[i+1]+dp[i+2];  //when we follow one digit previous result 1 and 9xxxxxxxxxx  plus two digits and  previous-previous result 19 + xxxxxxxxxx 
            }else if(curr!='0')   //cases like 27xxxxx or 37xxxxx, when we just follow one digit and previous result 3 + 7xxxxxxxx
                dp[i] = dp[i+1];
        }
        return dp[0];
    }
}

Python

class Solution:  # 36 ms, faster than 34.07%
    def numDecodings(self, s: str) -> int:
        @lru_cache(None)
        def dp(i):
            if i == len(s): return 1
            ans = 0
            if s[i] != '0':  # Single digit
                ans += dp(i + 1)
            if i + 1 < len(s) and (s[i] == '1' or s[i] == '2' and ord(s[i + 1]) <= ord('6')):  # Two digits
                ans += dp(i + 2)
            return ans

        return dp(0) 
        
or

class Solution:  # 28 ms, faster than 88.10%
    def numDecodings(self, s: str) -> int:
        n = len(s)
        dp = [0] * (n+1)
        dp[n] = 1
        for i in range(n-1, -1, -1):
            if s[i] != '0':  # Single digit
                dp[i] = dp[i+1]
            if i+1 < n and (s[i] == '1' or s[i] == '2' and ord(s[i+1]) <= ord('6')):  # Two digits
                dp[i] += dp[i+2]
        return dp[0]
        
or

class Solution:  # 24 ms, faster than 96.81%
    def numDecodings(self, s: str) -> int:
        dp, dp1, dp2, n = 0, 1, 0, len(s)
        for i in range(n-1, -1, -1):
            if s[i] != '0':  # Single digit
                dp += dp1
            if i+1 < n and (s[i] == '1' or s[i] == '2' and ord(s[i+1]) <= ord('6')):  # Two digits
                dp += dp2
            dp, dp1, dp2 = 0, dp, dp1
        return dp1
