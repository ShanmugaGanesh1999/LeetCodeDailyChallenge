C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void rec(TreeNode* root, int x, int y, int d, int parent) {
        if (!root) return;
        
        if (root->val == x) dx = d, x_par = parent;
        if (root->val == y) dy = d, y_par = parent;
        
        if (dx != -1 && dy != -1) return;
        
        rec(root->left, x, y, d+1, root->val);
        rec(root->right, x, y, d+1, root->val);
    }
    bool isCousins(TreeNode* root, int x, int y) {
        rec(root, x, y, 0, -1);
        return dx == dy && x_par != y_par;
    }
    
private:
    int dx = -1, dy = -1, x_par = -1, y_par = -1;
};

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode xParent = null;
    TreeNode yParent = null;
    int xDepth = 0;
    int yDepth = 0;
    public boolean isCousins(TreeNode root, int x, int y) {
        // dfs
        if(root == null) return false;
        helper(root, x, y, 0, null);
        return xDepth == yDepth && xParent != yParent;
    }
    
    public void helper(TreeNode root, int x, int y, int depth, TreeNode parent) {
        if(root == null) return;
        if(root.val == x) {
            xDepth = depth;
            xParent = parent;
        } else if(root.val == y) {
            yDepth = depth;
            yParent = parent;
        } else {
            helper(root.left, x, y, depth + 1, root);
            helper(root.right, x, y, depth + 1, root);
        }
    }
}

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        
        arr = [(root, None)]
        while arr:
            foundx = foundy = None
            new = []
            for node, parent in arr:
                if node.val == x: foundx = parent
                if node.val == y: foundy = parent
                if node.left: new.append((node.left, node))
                if node.right: new.append((node.right, node))
            arr = new
            if foundx and foundy and foundy != foundx:
                return True
        return False
