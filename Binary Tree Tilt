Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findTilt(TreeNode root) {       
        return findTiltHelper(root)[0];                        
    }
    
    // int [] ans= {newtreesum,oldtreesum};
    private int[] findTiltHelper(TreeNode root){
         if(root==null){
            return new int[]{0,0};
        }
        
        int leftsum[] = findTiltHelper(root.left);
        int rightsum[] =  findTiltHelper(root.right);
        int oldTreeSum = leftsum[1]+rightsum[1]+root.val;         
                
        
        int newTreeSum = leftsum[0]+rightsum[0]+Math.abs(leftsum[1]-rightsum[1]);         
        
        return  new int[]{newTreeSum,oldTreeSum};
        
        
    }
}

or


class Solution {
    public int findTilt(TreeNode root) {
       
        
        findTiltHelper(root);
        return sum;                
    }
	
int sum=0;
    
private int findTiltHelper(TreeNode root){
        if(root==null){
            return 0;
        }
        int leftsum =   findTiltHelper(root.left);
        int rightsum =  findTiltHelper(root.right);
        sum+= Math.abs(leftsum-rightsum);// our ans is  sum of diff of leftsum and rightsum at each Node
        return leftsum+rightsum +root.val;
        
    }
}

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findTilt(self, root: Optional[TreeNode]) -> int:
        def recurs(n):
            if not n:
                return (0, 0)
            
            l, r = n.left, n.right
            
            lSum, lTilt = recurs(l)
            rSum, rTilt = recurs(r)
            
            curTilt = abs(lSum - rSum)
            
            return (lSum + rSum + n.val, lTilt + rTilt + curTilt)

        return recurs(root)[1]
