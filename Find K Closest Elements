class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        stable_sort(begin(arr), end(arr), [x](const auto a, const auto b){
            return abs(a - x) < abs(b - x);   // sort by distance from x
        });
        arr.resize(k);                        // choose first k elements
        sort(begin(arr), end(arr));           // sort the output in ascending order before returning
        return arr; 
    }
};

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int L = 0, R = size(arr)-1;
        while (R - L >= k) 
            if (x - arr[L] <= arr[R] - x) R--;
            else L++;
        return vector<int>(begin(arr) + L, begin(arr) + R + 1);
    }
};

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {        
        int n = size(arr), R = lower_bound(begin(arr), end(arr), x) - begin(arr), L = R - 1;
        while(k--) 
            if(R >= n || L >= 0 && x - arr[L] <= arr[R] - x) L--;
            else R++;
        return vector<int>(begin(arr) + L + 1, begin(arr) + R);
    }
};

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {        
        int n = size(arr), R = lower_bound(begin(arr), end(arr) - k, x) - begin(arr), L = R - 1;
        while(k--) 
            if(R >= n || L >= 0 && x - arr[L] <= arr[R] - x) L--;
            else R++;
        return vector<int>(begin(arr) + L + 1, begin(arr) + R);
    }
};

class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        Queue<Integer> q = new LinkedList<Integer>();
        int i;
        for(i = 0 ; i<k ; i++)q.offer(arr[i]);
        while(i<arr.length){
            if(Math.abs(arr[i] - x) < Math.abs(q.peek()-x)){
                q.poll();
                q.offer(arr[i++]);
            }
            else if(Math.abs(arr[i++] - x) > Math.abs(q.peek()-x)) break;
        }
        return new ArrayList<Integer>(q);
    }
}

from bisect import bisect, bisect_left

class Solution:
    def findClosestElements(self, arr, k, x):
        n = len(arr)
        ind = bisect_left(arr, x)
        if ind == n or ind > 0 and arr[ind] + arr[ind-1] >= 2*x:
            ind -= 1

        beg, end = ind, ind
        for i in range(k-1):
            if beg == 0: end += 1
            elif end == n-1: beg -= 1
            else:
                if arr[end+1] + arr[beg-1] >= 2*x:
                    beg -= 1
                else:
                    end += 1

        return arr[beg:end+1]
