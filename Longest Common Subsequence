Python

class Solution:
    def longestCommonSubsequence(self, text1, text2):
        text1 = "!" + text1
        text2 = "!" + text2
        m, n = len(text1), len(text2)
        dp = [[0] * n for _ in range(m)]
        dp[0][0] = 1
        for i, j in product(range(m), range(n)):
            if text1[i] == text2[j]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

        return dp[-1][-1] - 1


C++

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector< vector<int> > dp(text1.size()+1, vector<int>(text2.size()+1));
        
        for (int i = 1; i <= text1.size(); i++)
            for (int j = 1; j <= text2.size(); j++)
                dp[i][j] = (text1[i-1] == text2[j-1]) ? dp[i-1][j-1]+1 : max(dp[i-1][j], dp[i][j-1]);
        
        return dp[text1.size()][text2.size()];
    }
};

Java

class Solution {
    public int longestCommonSubsequence(String str1, String str2) {
        int[][] dp = new int[str1.length() + 1][str2.length() + 1];
        
        for(int i = str1.length() - 1; i >= 0; i--){
            for(int j = str2.length() - 1; j >= 0; j--){
                if(str1.charAt(i) == str2.charAt(j))
                    dp[i][j] = dp[i+1][j+1] + 1;
                else
                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j+1]);
            }
        }
        return dp[0][0];
    }
}
