Pyhton:-

class Solution:
    def longestOnes(self, nums, k):
        beg, end, zeroes, ans = 0, 0, 0, 0
        while end < len(nums):
            if zeroes + (nums[end] == 0) <= k:
                zeroes += nums[end] == 0
                end += 1
                ans = max(ans, end - beg)
            else:
                zeroes -= nums[beg] == 0
                beg += 1  
        return ans
        
        
        
C++:-

class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int start = 0, end = 0, zeros = 0, res = 0;
        
        for (end = 0; end < nums.size(); end++) {
            
            // If we reached a zero, increase the zero counter.
            if (!nums[end])
                zeros++;
            
            // If the number of zeros is more than k, we finished with this subarray.
            // Now we can save the length and continue looking if we find a better one.
            while (zeros > k) {
                if (!nums[start]) zeros--;
                start++;
            } 
            
            res = max(res, end - start + 1);
        }
        
        return res;
    }
};

Java:-


class Solution {
    public int longestOnes(int[] nums, int k) {
        int l, r;
        l = r = 0;
        int zeros = 0;
        int ans = 0;
        int windowSize = 0;
        
        while(r < nums.length){
            if(nums[r] == 0){
                zeros++;
            }
            while(zeros > k){
                if(nums[l] == 0){
                    zeros -= 1;
                }
                l++;
            }
            windowSize = r - l + 1;
            ans = Math.max(ans, windowSize);
            r++;
        }
        return ans;
    }
}

Swift:-

class Solution {
    func longestOnes(_ nums: [Int], _ k: Int) -> Int {
        var l = 0, r = 0, res = 0, k = k
        while r < nums.endIndex {
            if nums[r] == 0 {
                k -= 1
                while k == -1 {
                    if nums[l] == 0 {
                        k += 1
                    }
                    l += 1
                }
            }
            res = max(res, r-l+1)
            r += 1
        }
        return res
    }
}
