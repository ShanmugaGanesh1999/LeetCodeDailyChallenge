C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& p) {
        int id = 0;
        return build(p, id, INT_MAX);
    }
    
    TreeNode* build(vector<int>& p, int& id, int limit) {
        if(id == p.size() || p[id] > limit)
            return NULL;
        int val = p[id++];
        TreeNode* root = new TreeNode(val);
        root->left = build(p, id, val);    //root->left must be less than the root
        root->right = build(p, id, limit); //root->right must be less than the previous root
        return root;
    }
};

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstFromPreorder(int[] preorder) {
        return helper(preorder, 0, preorder.length - 1);
    }
    
    public TreeNode helper(int[] preorder, int start, int end) {
        if(start > end) return null;
        TreeNode root = new TreeNode(preorder[start]);
        int index;
        for(index = start; index <= end; index++) {
            if(preorder[index] > preorder[start])
                break;
        }
        
        root.left = helper(preorder, start + 1, index - 1);
        root.right = helper(preorder, index, end);
        
        return root;
    }
}

Python

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def bstFromPreorder(self, preorder):
        """
        :type preorder: List[int]
        :rtype: TreeNode
        """
        
        if len(preorder) <= 0:
            return None
        
        root_val = preorder[0]
        right_start_idx = len(preorder)
        for i, v in enumerate(preorder[1:]):
            if v > root_val:
                right_start_idx = i+1
                break
        
        leftSubTree = self.bstFromPreorder(preorder[1:right_start_idx])
        rightSubTree = self.bstFromPreorder(preorder[right_start_idx:])
        
        return TreeNode(root_val, leftSubTree, rightSubTree)
        
        
or

class Solution(object):
    def bstFromPreorder(self, preorder):
        def insert(root, val):
            if root is None:
                return TreeNode(val)
            if root.val >= val:
                root.left = insert(root.left, val)
            if root.val < val:
                root.right = insert(root.right, val)
            return root
        root = None
        for item in preorder:
            root = insert(root, item)
        return root
    
or

class Solution:
	def bstFromPreorder(self, preorder: List[int]) -> Optional[TreeNode]:

		inorder = sorted(preorder)
		dic = {val:i for i,val in enumerate(inorder)}

		def bst(l,r):
			if l>=r:
				return
			
			val = preorder.pop(0)
			ind = dic[val]
			root = TreeNode(val)
			
			root.left = bst(l,ind)
			root.right= bst(ind+1,r)
			return root

		return bst(0,len(inorder))
