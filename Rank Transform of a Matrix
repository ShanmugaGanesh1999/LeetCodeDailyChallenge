Python

class UnionFind:
    def __init__(self):
        self.par = dict()
    def find(self, a):
        if a not in self.par:
            self.par[a] = a
        if a == self.par[a]:
            return a
        self.par[a] = self.find(self.par[a])
        return self.par[a]
    def union(self, u, v):
        u, v = self.find(u), self.find(v)
        self.par[u] = v
        

class Solution:
    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:
        h, w = len(matrix), len(matrix[0])
        vals = collections.defaultdict(list)
        
        for y in range(h):
            for x in range(w):
                vals[matrix[y][x]] += [(y, x)]
        cur_row = [0 for _ in range(h)]
        cur_col = [0 for _ in range(w)]
        ret = [[0 for _ in range(w)] for _ in range(h)]    
        for val in sorted(vals.keys()):
            uf = UnionFind()
            for y, x in vals[val]:
                uf.union(('y', y), ('x', x))
            groups = collections.defaultdict(list)
            for y, x in vals[val]:
                groups[uf.find(('y', y))].append((y, x))
            for group in groups.values():
                rank = 0
                for y, x in group:
                    rank = max(cur_row[y], cur_col[x], rank)
                for y,x  in group:
                    ret[y][x] = cur_row[y] = cur_col[x] = rank + 1
            
        return ret
        
or

class Solution:
    def matrixRankTransform(self, matrix: List[List[int]]) -> List[List[int]]:
        elts = []
        rank_matrix = [None] * len(matrix)
        for i in range(len(matrix)):
            rank_matrix[i] = [0] * len(matrix[i])
            for j in range(len(matrix[i])):
                elts.append((matrix[i][j], i, j))
        elts.sort(key=lambda x:x[0])
        
        max_rank_by_row = [0] * len(matrix)
        max_rank_by_col = [0] * len(matrix[0])
        
        def find(p, u):
            if p[u] == u:
                return u
            p[u] = find(p, p[u])
            return p[u]
        
        def assign_rank(same_val_cells):
            if len(same_val_cells) == 1:
                # No need to do the fancy disjoint set logic if there's only one value
                _, r, c = same_val_cells[0]
                rank = max(max_rank_by_row[r], max_rank_by_col[c]) + 1
                rank_matrix[r][c] = max_rank_by_row[r] = max_rank_by_col[c] = rank
                return
            
            # We treat each row, represented as (r, None) as a disjoint set, and each column,
			# represented as (None, c) as a disjoint set. And then whenever we encounter a cell at (r, c), 
			# we union the disjoint set (r, None) with (None, c)
            p = {}
            rank_by_root = {}
            for r in range(len(matrix)):
                u = (r, None)
                p[u] = u
                # The rank of any cell on this row, in this disjoint-set, must be higher than 
                # existing cells with lower values
                rank_by_root[u] = max_rank_by_row[r] + 1
            for c in range(len(matrix[0])):
                u = (None, c)
                p[u] = u
                # The rank of any cell on this column must be higher than existing cells
                # with lower values
                rank_by_root[u] = max_rank_by_col[c] + 1

            for e in same_val_cells:
                val, r, c = e
                u = (r, None)
                v = (None, c)
                root_u = find(p, u)
                root_v = find(p, v)
                if root_u != root_v:
                    # We have a cell that's at the intersection of row r and column c, so 
                    # we shall union the row and column into any existing rows and/or columns
                    # as one disjoint-set. To be consistent, the new disjoint-set must have
                    # the rank that's max of the ranks of just-joint parts.
                    p[root_u] = root_v
                    rank_by_root[root_v] = max(rank_by_root[root_u], rank_by_root[root_v])

            for e in same_val_cells:
                val, r, c = e
                u = (r, None)
                rank = rank_by_root[find(p, u)]
                rank_matrix[r][c] = max_rank_by_row[r] = max_rank_by_col[c] = rank

        prev_val = elts[0][0]
        same_val_cells = [elts[0]]
        for i in range(1, len(elts)):
            val, r, c = elts[i]
            if val == prev_val:
                same_val_cells.append(elts[i])
                continue
            
            # For cells with the same values, assign rank to them together to ensure their
            # ranks remain consistent across all rows and colums wherever the values appear
            assign_rank(same_val_cells)
            # Start accumulating a new group with the same value
            same_val_cells = [elts[i]]
            prev_val = val
        assign_rank(same_val_cells)
        
        return rank_matrix
        
        
C++

class DSU {
    vector<int> parent;    
    public:
    DSU(int n) {
        parent.resize(n, -1);
    }
    int getParent(int a) {
        return (parent[a] == -1 ? a : getParent(parent[a]));
    }
    void merge(int a, int b) {
        a = getParent(a);
        b = getParent(b);
        if(a > b)
            swap(a, b);
        if(a != b)
            parent[b] = a;
    }
};

const int SEP = 500;

class Solution {
public:
    vector<vector<int>> matrixRankTransform(vector<vector<int>>& matrix) {
        int i, j, m = matrix.size(), n = matrix[0].size();
        map<int, vector<int>> mp;
        vector<vector<int>> ret(m, vector<int>(n, 0));
        for(i=0; i<m; i++)
            for(j=0; j<n; j++) {
                int index = i * SEP + j;
                mp[matrix[i][j]].push_back(index);
            }
        vector<int> max_x(m, 0), max_y(n, 0);
        for(auto rec : mp) {
            auto &indexes = rec.second;
            DSU dsu(m + SEP + n);
            for(auto index : indexes) {
                int x = index / SEP;
                int y = index % SEP;
                dsu.merge(x, y + SEP);
            }
            unordered_map<int, vector<int>> partitions;
            for(auto index : indexes) {
                int p = dsu.getParent(index / SEP);
                partitions[p].push_back(index);
            }
            for(auto partition : partitions) {
                auto &a = partition.second;
                int x_rank = 0, y_rank = 0;
                for(i=0; i<a.size(); i++) {
                    int x = a[i] / SEP;
                    int y = a[i] % SEP;
                    x_rank = max(x_rank, max_x[x]);
                    y_rank = max(y_rank, max_y[y]);
                }
                int rank = max(x_rank, y_rank) + 1;
                for(i=0; i<a.size(); i++) {
                    int x = a[i] / SEP;
                    int y = a[i] % SEP;
                    ret[x][y] = rank;
                    max_x[x] = rank;
                    max_y[y] = rank;
                }
            }
        }
        return ret;
    }
};

Java

class Solution {
    public int[][] matrixRankTransform(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int[] rank = new int[n + m];
        Map<Integer, List<Pair<Integer, Integer>>> invMap = new TreeMap<>();
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                invMap.computeIfAbsent(matrix[i][j], l -> new ArrayList<>()).add(new Pair<>(i, j));
        for (int key : invMap.keySet()) {
            UF uf = new UF(n + m);
            int[] rank2 = rank.clone();
            for (Pair<Integer, Integer> coord : invMap.get(key)) {
                Pair<Integer, Integer> res = uf.union(coord.getKey(), coord.getValue() + n);
                rank2[res.getValue()] = Math.max(rank2[res.getValue()], rank2[res.getKey()]);
            }
            for (Pair<Integer, Integer> coord : invMap.get(key))
                rank[coord.getKey()] = rank[coord.getValue() + n] 
                                     = matrix[coord.getKey()][coord.getValue()] 
                                     = rank2[uf.find(coord.getKey())] + 1;
        }
        return matrix;
    }
}

class UF {
    int[] parent;
    public UF(int n) {
        parent = new int[n];
        for (int i = 0; i < n; i++) parent[i] = i;
    }
    public int find(int x) {
        return parent[x] = parent[x] == x ? x : find(parent[x]);
    }
    public Pair<Integer, Integer> union(int x, int y) {
        int px = find(x);
        int py = find(y);
        parent[px] = py;
        return new Pair<>(px, py);
    }
}
