class Solution {
    vector<vector<int>>ans;
public:    
    vector<vector<int>>& generate(int n) {
        if(n) {
            generate(n-1);                       // generate above row first
            ans.emplace_back(vector<int>(n,1));  // insert current row into triangle
            for(int i = 1; i < n-1; i++)         // update current row values using above row
                ans[n-1][i] = ans[n-2][i] + ans[n-2][i-1];    
        }
        return ans;
    }
};

class Solution:
    def generate(self, n: int) -> List[List[int]]:        
        def helper(n):
            if n:
                helper(n-1)                 # generate above row first
                ans.append([1]*n)           # insert current row into triangle
                for i in range(1, n-1):     # update current row values using above row
                    ans[n-1][i] = ans[n-2][i] + ans[n-2][i-1]
        ans = []
        helper(n)
        return ans
        
        
class Solution:
    def generate(self, n: int) -> List[List[int]]:
        ans = [[1]*i for i in range(1, n+1)]   # initialize triangle with all 1
        for i in range(1, n):
            for j in range(1, i):
                ans[i][j] = ans[i-1][j] + ans[i-1][j-1] # update each as sum of two elements from above row
        return ans
        
class Solution {
public:
    vector<vector<int>> generate(int n) {
        vector<vector<int>> ans(n);             // initialize n rows
        for(int i = 0; i < n; i++) {
            ans[i] = vector<int>(i+1,1);        // ith row(0-indexed) has i+1 elements
            for(int j = 1; j < i; j++)          // 1st and last elements will be 1, rest will be sum of two elements from above row
                ans[i][j] = ans[i - 1][j] + ans[i - 1][j - 1];            
        }
        return ans;
    }
};



const generate = (numRows) => {
    const getResultArray = (arr, lvl) => {
        if (lvl === numRows) return arr;
        
        if (lvl === 0) return getResultArray([[1]], ++lvl);
        if (lvl === 1) return getResultArray([[1],[1,1]], ++lvl);
        
        const arrCandidate = [];
        
        for (let i=1; i<arr[lvl-1].length; i++) {
            arrCandidate.push(arr[lvl-1][i-1]+arr[lvl-1][i]);
        }
        
        
        return getResultArray([...arr, [1, ...arrCandidate, 1]], ++lvl);
    }
    
    
    return getResultArray([], 0);
};
