Java

class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        if(firstList.length==0 || secondList.length==0) return new int[0][0];
        int i = 0;
        int j = 0;
        int startMax = 0, endMin = 0;
        List<int[]> ans = new ArrayList<>();
        
        while(i<firstList.length && j<secondList.length){
            startMax = Math.max(firstList[i][0],secondList[j][0]);
            endMin = Math.min(firstList[i][1],secondList[j][1]);
            
			//you have end greater than start and you already know that this interval is sorrounded with startMin and endMax so this must be the intersection
			if(endMin>=startMax){           
                ans.add(new int[]{startMax,endMin});
            }
            
			//the interval with min end has been covered completely and have no chance to intersect with any other interval so move that list's pointer
            if(endMin == firstList[i][1]) i++;       
            if(endMin == secondList[j][1]) j++;
        }
        
        return ans.toArray(new int[ans.size()][2]);
    }
}

C++

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        vector<vector<int>> ans;
        int i = 0, j = 0;
        while(i < size(A) && j < size(B)) {
			// intersection condition
            if(A[i][1] >= B[j][0] && A[i][0] <= B[j][1]) 
                ans.push_back({max(A[i][0], B[j][0]), min(A[i][1], B[j][1])});
            A[i][1] < B[j][1] ? i++ : j++;    // increment pointer of list whose interval ended first
        }
        return ans;
    }
};

Python

class Solution:
    def intervalIntersection(self, A, B):
        ans, i, j = [], 0, 0
        while i < len(A) and j < len(B):
            if A[i][1] >= B[j][0] and A[i][0] <= B[j][1]:
                ans.append([max(A[i][0], B[j][0]), min(A[i][1], B[j][1])])
            if A[i][1] < B[j][1]: i += 1
            else: j += 1
        return ans
