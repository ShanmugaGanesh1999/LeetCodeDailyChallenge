Java

class Solution {
    public int orangesRotting(int[][] grid) {
     
        int i,j,n=grid.length,m=grid[0].length,ans=0,frsh=0;
        Queue<int[]> queue=new LinkedList();
        
        for(i=0;i<n;i++)
            for(j=0;j<m;j++) {
                if(grid[i][j]==2) {

                    queue.add(new int[]{i,j});  grid[i][j]=0;
                }
                else if(grid[i][j]==1)
                    frsh++;
			}
        
        while(!queue.isEmpty())  {
            
            int size=queue.size();
            while(size-->0)
            {
                int tm[]=queue.poll();
                i=tm[0];
                j=tm[1];
                if(i+1<n&&grid[i+1][j]==1) {
                    
                    queue.add(new int[]{i+1,j});  grid[i+1][j]=0; frsh--;
                }
                if(j+1<m&&grid[i][j+1]==1) {
                    
                    queue.add(new int[]{i,j+1});  grid[i][j+1]=0; frsh--;
                }
                if(i-1>=0&&grid[i-1][j]==1) {
                    
                    queue.add(new int[]{i-1,j});  grid[i-1][j]=0;  frsh--;
                }
                if(j-1>=0&&grid[i][j-1]==1) {
                    
                    queue.add(new int[]{i,j-1});  grid[i][j-1]=0;  frsh--;
                }
            }
            if(queue.size()>0)
                ans++; 
        }
        
        if(frsh>0)
            return -1;
        return ans;
    }
}

C++

/*
Approach:

    Store position of all initially rotten oranges
    Count all fresh oranges at start
    Start traversing from rotten oranges, go to it's 4 adjacent positions and if the orange is fresh, then rot it, decrease the count of fresh oranges
    Increase the time after repeating above step for all currently rotten oranges
    At last, if any fresh orange is remaining then return -1, if time is -1 (Didn't start trsversing) then return 0, else return time taken to rot all oranges
*/

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        
        int fresh = 0, time = -1;
        
        vector<pair<int, int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        queue<pair<int, int>> q;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1) fresh++;
                else if(grid[i][j] == 2) q.push({i, j});
            }
        }
        
        while(!q.empty()) {
            int sz = q.size();
            for(int i = 0; i < sz; i++) {
                auto cur = q.front();
                q.pop();
                for(auto dir: dirs) {
                    int x = cur.first + dir.first;
                    int y = cur.second + dir.second;
                    if(x >= 0 and x < m and y >= 0 and y < n and grid[x][y] == 1) {
                        grid[x][y] = 2;
                        q.push({x, y});
                        fresh--;
                    }
                }
            }
            time++;
        }
        
        return (fresh > 0) ? -1 : ((time == -1) ? 0 : time);
    }
};

Python

'''
Preamble

I've posted a solution about a similar problem before: #980 Uinque Paths III. In my opinion, the solution to this problem follows a similar train of thought, albeit using a different recursive method (BFS instead of DFS). You can read my post for problem #980 here to understand the thought process better before continuing with this post.

Introduction

The goal is to traverse from every rotting orange (grid[x][y] == 2) through every fresh orange (grid[x][y] == 1) until all fresh oranges have been visited once (i.e. all fresh oranges have rotten) or no more traversion is possible (i.e. no adjacent fresh oranges are found).

Since, for each passing minute, all adjacent fresh oranges become rotten, we need to recursively check for the coordinates of rotting oranges after each iteration. More specifically, we only need to keep track of the oranges that have rotten in that iteration, since 1) that particular coordinate has never been reached before and thus needs to be checked for adjacent oranges; and 2) all previous coordinates have been checked previously and need not be checked again. For this purpose, we can implement a queue:

from collections import deque
queue = deque()
# populate with coordinates of rotten oranges
for _ in range(len(queue)):
	x, y = queue.popleft()  # remove coordinate to check for adjacent fresh oranges
	# check for fresh oranges...
	queue.append((i, j))  # add new rotten orange coordinate

We also need to keep track of all fresh oranges, since this is our success condition. Fresh oranges are: 1) to be visited, otherwise we should return -1 if the orange stays fresh, and 2) visited only once, since upon visiting it becomes rotten. To perform (x, y) in lst checks and the deletion of (x, y) in O(1) time, we can utilise a set:

visit = set()
# populate with coordinates of fresh oranges
while visit:
	# check if adjacent coordinates are rotten oranges...
	visit.remove((x, y))  # remove new rotten orange

This leaves us with the initial population of the data structures, and the actual BFS. We can thus derive the following implementation:

    Loop through grid and find the fresh and rotten oranges.
    While there are fresh and rotten oranges to loop through, determine if any fresh oranges will become rotten in that iteration. Repeat for as many iterations as needed (BFS style).
    Return the number of iterations, checking if there are fresh oranges remaining.

'''

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        visit, curr = set(), deque()
		# find all fresh and rotten oranges
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 1:
                    visit.add((i, j))
                elif grid[i][j] == 2:
                    curr.append((i, j))
        result = 0
        while visit and curr:
			# BFS iteration
            for _ in range(len(curr)):
                i, j = curr.popleft()  # obtain recent rotten orange
                for coord in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):
                    if coord in visit:  # check if adjacent orange is fresh
                        visit.remove(coord)
                        curr.append(coord)
            result += 1
		# check if fresh oranges remain and return accordingly
        return -1 if visit else result
