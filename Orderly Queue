C++

class Solution {
public:
string orderlyQueue(string s, int k) {

    if(k==1){
        
        string temp=s;
        
        for(int i=0;i<s.length();i++){
            
            string sub=s.substr(i)+s.substr(0,i);
            
            if(min(temp,sub)==sub){
                temp=sub;
            }
            
        }
        
        return temp;
    }
    
    else{
        
        sort(s.begin(),s.end());
        
        return s;
    }
}

};

or

class Solution {
public:
    string orderlyQueue(string s, int k) {
        if(k==1){
            string ans = s;
            for(int i=0;i<s.length();i++){
                ans = min(ans,s.substr(i)+s.substr(0,i));
            }
            return ans;
        }
        sort(s.begin(),s.end());
        return s;
    }
};

Java

class Solution {
    public String orderlyQueue(String s, int k) {
        if(k == 1) {
            StringBuilder sb = new StringBuilder(s), ans = new StringBuilder(sb);
            for(int i = 0; i < s.length(); i++) {
                char ch = sb.charAt(0);
                sb = sb.deleteCharAt(0);
                sb.append(ch);
                if(ans.compareTo(sb) > 1)
                    ans = new StringBuilder(sb);
            }
            return new String(ans);
        }
        else {
            char[] arr = s.toCharArray();
            Arrays.sort(arr);
            return new String(arr);
        }
    }
}

Python

class Solution:
   def orderlyQueue(self, S, K):
       if K > 1: return "".join(sorted(S))
       return min(S[i:]+S[:i] for i in range(len(S)))
