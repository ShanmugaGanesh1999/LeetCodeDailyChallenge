Java

class Solution {
        
    public int atMostNGivenDigitSet(String[] digits, int n) {
        int len = (int)Math.log10(n), ans = 0; //the log10 function returns length - 1
        for (int i = 1; i <= len; i++) ans += (int)Math.pow(digits.length, i); // all number with length less than n
        while(n >= Integer.parseInt(digits[0]) && len == (int)Math.log10(n)){ //number with length equals to n
            int f = n / (int)Math.pow(10, len); //first digit of n
            for (int i = 0; i < digits.length; i++){
                int cur = Integer.parseInt(digits[i]); //cur number
                if (cur < f || cur == f && len == 0) ans += (int)Math.pow(digits.length, len); //add all
                if (cur == f){ n %= (int)Math.pow(10, len--); break;} //Truncate the first digit of n to explore the next layer
                if (cur > f || i == digits.length - 1) return ans; //terminate when cur num is greater than the first digit
            }
        }

        return ans;
    }
}
