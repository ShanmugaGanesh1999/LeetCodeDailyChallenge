C++

class Solution {
public:
   vector<vector<int>> threeSum(vector<int>& nums) {
    int n = nums.size();
    set<vector<int>> v;
    int l, r;
    
    sort(nums.begin(), nums.end());
    
    for(int i=0; i<n-1; i++){
        l=i+1, r=n-1;
        
        while(l<r){
            if(nums[i]+nums[l]+nums[r] == 0){
                v.insert({nums[i], nums[l], nums[r]});
                l++, r--;
            }
            else if(nums[i]+nums[l]+nums[r] > 0){
                r--;
            }
            else{
                l++;
            }
        }
    }
    
    vector<vector<int>> v1;
    for(auto i=v.begin(); i!=v.end(); i++){
        v1.push_back(*i);
    }
    return v1;
        
    
}
};

Java

class Solution {
    public  List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> res  = new HashSet<>();
        if(nums.length==0) return new ArrayList<>(res);
        Arrays.sort(nums);
        for(int i=0; i<nums.length-2;i++){
            int j =i+1;
           int  k = nums.length-1;
            while(j<k){
                int sum = nums[i]+nums[j]+nums[k];
                if(sum==0)res.add(Arrays.asList(nums[i],nums[j++],nums[k--]));
                else if ( sum >0) k--;
                else if (sum<0) j++;
            }

        }
        return new ArrayList<>(res);
    }
}

Python

class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        Set=set()
        
        nums.sort()
        
        n=len(nums)
        for i in range(n):
            j=i+1
            k=n-1
            while(j<k):
                sum=nums[i]+nums[j]+nums[k]
                if sum==0:
                    Set.add((nums[i],nums[j],nums[k]))
                    k=k-1
                    j=j+1
                        
                elif sum>0:
                    k=k-1
                    
                else:
                    j=j+1
                    
        return [list(i) for i in Set]
