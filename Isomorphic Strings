Java:-


class Solution {
public boolean isIsomorphic(String s, String t) {

      if(s.length() != t.length()){
	       return false;
	  }
	
	HashMap< Character , Character > map1 = new HashMap<>();
	HashMap< Character , Boolean > map2 = new HashMap<>();
    
    for(int i = 0 ; i < s.length();i++){
        char ch1 = s.charAt(i);
        char ch2 = t.charAt(i);
        
        if(map1.containsKey(ch1) == true){
            if(map1.get(ch1) != ch2){
                return false;
            }
        }else{
            if(map2.containsKey(ch2) == true){
                return false;
            }else{
                map1.put(ch1 , ch2);
                map2.put(ch2 , true);
            }
        }
        
    }
            return true;   
}

}


C++:-


class Solution {
public:
    bool isIsomorphic(string s, string t) {
        return normalize(s) == normalize(t);
    }
    string normalize(const string& s) {
        char mapping[128] = {};
        string ans = "";
        char nextChr = 'a';
        for (char c : s) {
            if (mapping[c] == 0) {
                mapping[c] = nextChr;
                ++nextChr;
            }
            ans += mapping[c];
        }
        return ans;
    }
};


Python:-


class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        def normalize(s):
            seen = dict()
            ans = ""
            nextChr = 'a'
            for c in s:
                if c not in seen:
                    seen[c] = nextChr
                    nextChr = chr(ord(nextChr) + 1)
                ans += seen[c]
            return ans

        return normalize(s) == normalize(t)
        
        
or


class Solution:
    def isIsomorphic(self, s: str, t: str) -> bool:
        sDict = {}
        tDict = {}
        for c1, c2 in zip(s, t):
            # Case 1: No mapping exists in either of the dictionaries -> Let's mapping
            if (c1 not in sDict) and (c2 not in tDict):
                sDict[c1] = c2
                tDict[c2] = c1
            # Case 2: Case one side is mapped but the other is not. Or both mapping exists but they mismatch!     
            elif (c1 not in sDict) or (c2 not in tDict) or (sDict[c1] != c2) or (tDict[c2] != c1):
                return False
        return True
