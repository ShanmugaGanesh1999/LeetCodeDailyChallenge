In C++

class Solution {
public:
    int dp[100][100][100];
    int solve(vector<int>& boxes, int i, int j, int k)
    {
        if(i>j) return 0;
        if(dp[i][j][k]!=-1) return dp[i][j][k];
        int res = (k+1)*(k+1)+solve(boxes,i+1,j,0);
        for(int it=i+1; it<=j; it++)
            if(boxes[it]==boxes[i]) 
                res = max(res,solve(boxes,i+1,it-1,0)+solve(boxes,it,j,k+1));
        return dp[i][j][k]=res;
    }
    int removeBoxes(vector<int>& boxes)
    {    
        memset(dp,-1,sizeof dp);
        return solve(boxes, 0, boxes.size()-1, 0);   
    }
};

In JAVA

class Solution {
    private int[][][] dp;
    public int removeBoxes(int[] boxes) {
        int len = boxes.length;
        dp = new int[len][len][len];
        return dfs(boxes, 0, len - 1, 0);
    }
    private int dfs(int[] boxes, int i, int j, int k){
        if(i > j) return 0;
        if(dp[i][j][k] > 0) return dp[i][j][k];
        dp[i][j][k] = dfs(boxes, i, j - 1, 0) + (k + 1) * (k + 1);
        for(int p = i; p < j; p++){
            if(boxes[p] == boxes[j])
            {
                dp[i][j][k] = Math.max(dp[i][j][k], dfs(boxes, i, p, k + 1) + dfs(boxes, p + 1, j - 1, 0));
            }
        }
        return dp[i][j][k];
    }
}

or

class Solution {
    private int[][][] dp;
    public int removeBoxes(int[] boxes) {
        int len = boxes.length;
        dp = new int[len][len][len];
        return dfs(boxes, 0, len - 1, 0);
    }
    private int dfs(int[] boxes, int i, int j, int k){
        if(i > j) return 0;
        if(dp[i][j][k] > 0) return dp[i][j][k];
        dp[i][j][k] = dfs(boxes, i, j - 1, 0) + (k + 1) * (k + 1);
        for(int p = i; p < j; p++){
            if(boxes[p] == boxes[j]){
                dp[i][j][k] = Math.max(dp[i][j][k], dfs(boxes, i, p, k + 1) + dfs(boxes, p + 1, j - 1, 0));
            }
        }
        return dp[i][j][k];
    }
}

In Python3

class Solution:
    def removeBoxes(self, boxes: List[int]) -> int:
        @cache
        def solve(i, j, k): 
            if i == j: 
                return 0 
            while i+1 < j and boxes[i] == boxes[i+1]: i, k = i+1, k+1
            ans = (k+1)*(k+1) + solve(i+1, j, 0)
            for mid in range(i+2, j): 
                if boxes[i] == boxes[mid]: 
                    ans = max(ans, solve(i+1, mid, 0) + solve(mid, j, k+1))
            return ans 
                
        return solve(0, len(boxes), 0)


or

class Solution:
    def removeBoxes(self, boxes):
        
        @lru_cache(None)
        def dfs(i, j, k):
            if i > j: return 0
            
            m = i
            while m+1 <= j and boxes[m+1] == boxes[i]:
                m += 1
            if m > i: return dfs(m, j, k+m-i)
         
            res = dfs(i+1, j, 0) + (k+1)*(k+1)
            for m in range(i+1, j+1):
                if boxes[m] == boxes[i]:
                    res = max(res, dfs(i+1, m-1, 0) + dfs(m, j, k+1))
            return res
        return dfs(0, len(boxes)-1, 0)
