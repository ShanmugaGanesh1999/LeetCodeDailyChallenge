C++

class Solution {
public:
    //pass board by reference
    bool DFS(vector<vector<char>>& board, string word, int i, int j, int n) {
		//check if all the alphabets in the word is checked
        if(n == word.size()) return true; 
        
		//check if i and j are out of bound or if the characters aren't equal
        if(i < 0 || i >= board.size() || j < 0 || j >= board[i].size() || board[i][j] != word[n]) return false;
        
		//mark as visited 
        board[i][j] = '0';
        
		//branch out in all 4 directions
        bool status = DFS(board, word, i + 1, j, n + 1) ||  //down
                        DFS(board, word, i, j + 1, n + 1) ||  //right
                        DFS(board, word, i - 1, j, n + 1) ||  //up
                        DFS(board, word, i, j - 1, n + 1);  //left
        
		//change the character back for other searches
        board[i][j] = word[n];
		
        return status;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        if(word == "") return false;
        
        for(int i = 0; i < board.size(); i++) 
            for(int j = 0; j < board[i].size(); j++) 
				//check if the characters are equal then call DFS
                if(board[i][j] == word[0] && DFS(board, word, i, j, 0))
                    return true;
        
        return false;
    }
};

Java

class Solution {
        public boolean exist(char[][] board, String word) {
            for (int i = 0; i < board.length; i++)
                for (int j = 0; j < board[0].length; j++)
                    if (board[i][j] == word.charAt(0) && isFound(board, i, j, word, 0))
                        return true;

            return false;
        }

        private boolean isFound(char[][] board, int i, int j, String word, int index) {
            if (index == word.length()) return true;
            if (i < 0 || j < 0 || i >= board.length || j >= board[0].length) return false;
            if (word.charAt(index) != board[i][j]) return false;
            char temp = board[i][j];
            board[i][j] = '*';
            if (isFound(board, i + 1, j, word, index + 1) ||
                    isFound(board, i - 1, j, word, index + 1) ||
                    isFound(board, i, j + 1, word, index + 1) ||
                    isFound(board, i, j - 1, word, index + 1))
                return true;
            board[i][j] = temp;
            return false;
        }
    }
    
Python

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        
        def solver(i, j, k):
            nonlocal board, word, is_visited, n_r, n_c, n_w
            if i < 0 or j < 0 or i >= n_r or j >= n_c or k >= n_w or is_visited[i][j] or board[i][j] != word[k]:
                return False
            if k == n_w-1:
                return True
            is_visited[i][j] = True
            if solver(i, j+1, k+1) or solver(i, j-1, k+1) or solver(i+1, j, k+1) or solver(i-1, j, k+1):
                return True
            is_visited[i][j] = False
            return False
            
        n_r, n_c, n_w = len(board), len(board[0]), len(word)
        is_visited = [[0] * n_c for _ in range(n_r)]
        for i in range(n_r):
            for j in range(n_c):
                if board[i][j] == word[0]:
                    if solver(i, j, 0):
                        return True
        return False

or

class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m = len(board)
        n = len(board[-1])
        
        def dfs( i, j, k, v):
            if k >= len(word):
                # print(v)
                return 1
            ret = 0
            if i+1 < m and board[i+1][j] == word[k] and v[(i+1)*n + j] ==  0:
                v[(i+1)*n + j] = 1
                ret += dfs( i+1, j, k+1, v.copy())
                v[(i+1)*n + j] = 0
            if ret == 0 and i-1 > -1 and board[i-1][j] == word[k] and v[(i-1)*n + j] ==  0:
                v[(i-1)*n + j] = 1
                ret += dfs( i-1, j, k+1, v.copy())
                v[(i-1)*n + j] = 0
            if ret == 0 and j+1 < n and board[i][j+1] == word[k]  and v[i*n + j+1] ==  0:
                v[i*n + j+1] = 1
                ret += dfs( i, j+1, k+1, v.copy())
                v[i*n + j+1] = 0
            if ret == 0 and j-1 > -1 and board[i][j-1] == word[k] and v[i*n + j-1] ==  0:
                v[i*n + (j-1)] = 1
                ret += dfs( i, j-1, k+1, v.copy())
                v[i*n + (j-1)] = 0
            return ret
        
        for i in range(m):
            for j in range(n):
                if word[0] == board[i][j]:
                    v = [0] * (m*n)
                    v[i*n + j] = 1
                    if dfs(i,j,1, v) == 1:
                        return True
        return False
