Js

var movesToChessboard = function(board) {
    const boardSize = board.length;
    const boardSizeIsEven = boardSize % 2 === 0;
       
    if(!canBeTransformed(board)) return -1;
    
    // to convert to 010101
    let rowSwap = 0;
    let colSwap = 0;
    
    // to convert to 101010
    let rowSwap2 = 0;
    let colSwap2 = 0;
    
    for(let i=0; i<boardSize; i++) {
        if(board[i][0] === i % 2) {
            rowSwap++;
        } else {
            rowSwap2++;
        }
        if(board[0][i] === i % 2) {
            colSwap++;
        } else {
            colSwap2++;
        }
    }
   
    // no need to swap anything
    if((rowSwap + colSwap) === 0 || (rowSwap2 + colSwap2) === 0) return 0; 
    
    if(boardSizeIsEven) {
        rowSwap = Math.min(rowSwap, rowSwap2);
        colSwap = Math.min(colSwap, colSwap2);
    } else {
        rowSwap = rowSwap % 2 === 0  ? rowSwap : rowSwap2;
        colSwap = colSwap % 2 === 0 ? colSwap : colSwap2;
    }
   
    return (rowSwap + colSwap) / 2;
    
    function canBeTransformed(board) {
        // number of 0 and 1 should be equal
        let sum = board[0].reduce((a,b) => a+b);
        if(boardSizeIsEven && sum != boardSize/2) return false;
        if(!boardSizeIsEven && sum > ((boardSize + 1)/2)) return false;
        
        let first = board[0].join('');
        let opposite = board[0].map((item) => item === 1 ? 0 : 1).join('');
        // each row should be equal to first or opposite
        let counter = [0,0];
        for(let i=0; i<boardSize; i++) {
            let str = board[i].join('');
            if(str == first) {
                counter[0]++;
            } else if(str == opposite) {
                counter[1]++;
            } else {
                return false;
            }
        }
        // for even board, two types of rows should be equal
        if(boardSizeIsEven) {
            return counter[0] == counter[1];
        }
        return Math.abs(counter[0] - counter[1]) === 1
    }
};

Java

class Solution {
    int n;
    int[][] board;
    int countInRow(int r,int what){
        int count=0;
        for(int i =0;i<n;i++)if(board[r][i]==what)count++;

        return count;
    }
    int countInCol(int c,int what){
        int count=0;
        for(int i =0;i<n;i++)if(board[i][c]==what)count++;

        return count;
    }

    public int movesToChessboard(int[][] board) {
        n = board.length;
        this.board = board;

        int sameMinRowF = -1;
        int sameMaxRowF = -1;
        int sameMinColF = -1;
        int sameMaxColF = -1;
        for (int i = 0; i < n; i++) {
            int newCountOnesRow = countInRow(i, 1);
            int newCountZerosRow = countInRow(i, 0);
            if(Math.abs(newCountOnesRow-newCountZerosRow)>1)return -1;
            int newCountZerosCol = countInCol(i, 0);
            int newCountOnesCol = countInCol(i, 1);
            if(Math.abs(newCountZerosCol-newCountOnesCol)>1)return -1;
            int[]row=board[i];
            int same0Row = countSameInRow(row, 0);
            int same1Row = countSameInRow(row, 1);
            int sameMinRow = Math.min(same0Row,same1Row);
            int sameMaxRow = Math.max(same0Row, same1Row);
            if(sameMinRowF==-1)sameMinRowF = sameMinRow;
            if(sameMaxRowF==-1)sameMaxRowF=sameMaxRow;
            if(sameMinRowF!=sameMinRow)return -1;
            if(sameMaxRowF!=sameMaxRow)return -1;

            int same0Col=countSameInCol(i, 0); 
            int same1Col=countSameInCol(i, 1); 
            int sameMinCol = Math.min(same0Col,same1Col);
            int sameMaxCol = Math.max(same0Col, same1Col);
            if(sameMinColF==-1)sameMinColF = sameMinCol;
            if(sameMaxColF==-1)sameMaxColF=sameMaxCol;
            if(sameMinColF!=sameMinCol)return -1;
            if(sameMaxColF!=sameMaxCol)return -1;
        }
        int count=0;
        boolean isEven =n%2==0;
        if(isEven){
            //101010 nz=3,no=3
            //010101
            int nz = countInRow(0,0);
            int no = countInRow(0,1);
            if(nz!=no)throw new Error("can't");
            nz = countInCol(0,0);
            no = countInCol(0,1);
            if(nz!=no)throw new Error("can't");
            //00111100
            //1001
            //0110
            int c1=0;int c0=0;
            for(int i=0;i<n;i+=2){if(board[0][i]!=1)c1++;if(board[0][i]!=0)c0++;}
            count+=Math.min(c1,c0);
            c1=0;c0=0;
            for(int i=0;i<n;i+=2){if(board[i][0]!=1)c1++;if(board[i][0]!=0)c0++;}
            count+=Math.min(c1,c0);
        }else{
            //1010101 nz=3, no=4
            //0101010 nz=4, no=3

            //1100100100111
            int nz = countInRow(0,0);
            int no = countInRow(0,1);
            if(nz==no+1){
                //0101010
                for(int i =1;i<n;i+=2)if(board[0][i]!=1)count++;
            }else if(no==nz+1){
                //101
                for(int i =1;i<n;i+=2)if(board[0][i]!=0)count++;

            }else throw new Error("can't");
            nz = countInCol(0,0);
            no = countInCol(0,1);
            if(nz==no+1){
                //0101010
                for(int i =1;i<n;i+=2)if(board[i][0]!=1)count++;
            }else if(no==nz+1){
                //101
                for(int i =1;i<n;i+=2)if(board[i][0]!=0)count++;

            }else throw new Error("can't");

        }
            
        return count;
    }
    int countSameInRow(int[]row, int what){
        int count=0;
        int prev=row[0];
        int len=1;
        for(int i =1;i<n;i++){
            int curr=row[i];
            if(curr==what&&curr==prev){
                len++;
            }else{
                count+=len-1;
                len=1;
            }
            prev=curr;
        }
        count+=len-1;
        return count;
    }
    int countSameInCol(int c, int what){ 
        int count=0;
        int prev=board[0][c];
        int len=1;
        for(int i =1;i<n;i++){
            int curr=board[i][c];
            if(curr==what&&curr==prev){
                len++;
            }else{
                count+=len-1;
                len=1;
            }
            prev=curr;
        }
        count+=len-1;
        return count; 
    }  
} 

C++

class Solution {
public:
    int movesToChessboard(vector<vector<int>>& board) {
        int n = board.size();
        
        int cnt1 = 1, cnt2 = 0;
        
        for (int i = 1; i < n; ++i) {
            
            if (board[0][0] == board[i][0]) {
                ++cnt1;
                
                for (int j = 0; j < n; ++j) {
                  if (board[0][j] != board[i][j]) {
                        return -1;
                    }  
                }
            } else {
                ++cnt2;
                
                for (int j = 0; j < n; ++j) {
                    if (board[0][j] == board[i][j]) {
                        return -1;
                    }
                }
            }
        }

        if (abs(cnt1 - cnt2) > 1) {
            return -1;
        }
        
        cnt1 = 1, cnt2 = 0;
        for (int j = 1; j < n; ++j) {
            
            if (board[0][0] == board[0][j]) {
                ++cnt1;
                
                for (int i = 0; i < n; ++i) {
                    if (board[i][0] != board[i][j]) {
                        return -1;
                    }
                }
            } else {
                ++cnt2;
                
                for (int i = 0; i < n; ++i) {                      
                    if (board[i][0] == board[i][j]) {
                        return -1;
                    }
                }
            }
        }
        
        if (abs(cnt1 - cnt2) > 1) {
            return -1;
        }
        
        int swapRow = 0, swapCol = 0;
        
        for (int i = 0; i < n; ++i) {
            if (board[i][0] != i % 2) {
                ++swapRow;
            }
        }
        
        for (int j = 0; j < n; ++j) {
            if (board[0][j] != j % 2) {
                ++swapCol;
            }
        }
        
        int ans = 0;
        if (n & 1) {
            if (swapRow & 1) {
                swapRow = n - swapRow;
            }
            
            if (swapCol & 1) {
                swapCol = n - swapCol;
            }
            
            ans += swapRow / 2;
            ans += swapCol / 2;
        } else {
            ans += min(swapRow, n - swapRow) / 2;
            ans += min(swapCol, n - swapCol) / 2;
        }
        
        return ans;
    }
};

Python

class Solution:
    def movesToChessboard(self, board):
        n = len(board)
        patt1 = ([0, 1]*(n//2+1))[:n]
        patt2 = ([1, 0]*(n//2+1))[:n]
        
        board_t = map(list, zip(*board))
        Cnt_r = list(Counter(tuple(row) for row in board).items())
        Cnt_c = list(Counter(tuple(row) for row in board_t).items())
        if len(Cnt_r) != 2 or len(Cnt_c) != 2: return -1
        if abs(Cnt_r[0][1] - Cnt_r[1][1]) > 1: return -1
        if abs(Cnt_c[0][1] - Cnt_c[1][1]) > 1: return -1
        
        x1 = sum(i != j for i,j in zip(Cnt_r[0][0], patt1))
        y1 = sum(i != j for i,j in zip(Cnt_c[0][0], patt1))
        
        x2 = sum(i != j for i,j in zip(Cnt_r[0][0], patt2))
        y2 = sum(i != j for i,j in zip(Cnt_c[0][0], patt2))
        
        cands_x = [x for x in [x1, x2] if x % 2 == 0]
        cands_y = [y for y in [y1, y2] if y % 2 == 0]
        
        return min(cands_x)//2 + min(cands_y)//2
