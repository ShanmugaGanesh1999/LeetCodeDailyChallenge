C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode* root) {
        if (!root) return;
        inorder(root->left);
        vec.push_back(root->val);
        inorder(root->right);
    }
    
    bool findTarget(TreeNode* root, int k) {
        inorder(root);
        int l = 0, r = vec.size()-1;
        while (l < r) {
            if (vec[l] + vec[r] == k) return true;
            else {
                if (vec[l] + vec[r] < k) l++;
                else r--;
            }
        }
        return false;
    }
    
private:
    vector<int> vec;
};

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<Integer> list=new LinkedList();
    
    public boolean findTarget(TreeNode root, int k) {
        fillTheList(root);     
        int i=0, j=list.size()-1;
        while(i<j){
			//If sum of two elements is less than K than increment i
            if(list.get(i)+list.get(j)<k)
                i++;
            
			//If sum of two elements is greater than K than decrement j
            else if(list.get(i)+list.get(j)>k)
                j--;
            
            else
                return true;
            
        }
		
		//If No pair found equals to K
        return false;
    }
    
    
    public void fillTheList(TreeNode root){
        if(root==null)
            return ;
        fillTheList(root.left);
        list.add(root.val);
        fillTheList(root.right);
    }
}

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        def dfs(root, seen):
            if root == None: return False
            complement = k - root.val
            if complement in seen: return True
            seen.add(root.val)
            return dfs(root.left, seen) or dfs(root.right, seen)
        
        return dfs(root, set())
        
or

class Solution:
    def findTarget(self, root: TreeNode, k: int) -> bool:
        def pushLeft(root, st):
            while root:
                st.append(root)
                root = root.left

        def pushRight(root, st):
            while root:
                st.append(root)
                root = root.right

        def getLeft(st):
            node = st.pop()
            pushLeft(node.right, st)
            return node.val

        def getRight(st):
            node = st.pop()
            pushRight(node.left, st)
            return node.val

        stLeft, stRight = [], []
        pushLeft(root, stLeft)
        pushRight(root, stRight)
        
        left, right = getLeft(stLeft), getRight(stRight)
        while left < right:
            if left + right == k: return True
            if left + right < k:
                left = getLeft(stLeft)
            else:
                right = getRight(stRight)
        return False
