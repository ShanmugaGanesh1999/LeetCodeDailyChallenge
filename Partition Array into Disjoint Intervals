Java:-


class Solution {
    public int partitionDisjoint(int[] nums) {
        int n = nums.length;
        int[] maxLeft = new int[n], minRight = new int[n];
        maxLeft[0] = nums[0];
        for(int i = 1; i < n; i++)
            maxLeft[i] = Math.max(nums[i], maxLeft[i - 1]);
        minRight[n - 1] = nums[n - 1];
        for(int i = n - 2; i >= 0; i--)
            minRight[i] = Math.min(nums[i], minRight[i + 1]);
        for(int i = 1; i < n; i++)
            if(maxLeft[i - 1] <= minRight[i])
                return i;
        return n;
    }
}


C++:-


class Solution {
public:
    int partitionDisjoint(vector<int>& nums) {
        int n = nums.size();
        int max_1, curr, ans = 1;
        max_1 = curr = nums[0];
        for(int i = 0; i < n; i++){
            if(nums[i] < max_1){
                max_1 = curr;
                ans = i + 1;
            }
            else if(nums[i] > curr){
                curr = nums[i];                
            }
        }
        return ans;
    }
};


Python:-


class Solution:
    def partitionDisjoint(self, nums: List[int]) -> int:
        leftMax = globalMax = nums[0]
        partition = 0
        for i in range(1, len(nums)):
            globalMax = max(globalMax, nums[i])
            if nums[i] < leftMax:  # If nums[i] < leftMax then nums[i] belong to left subarray, re-partition leftSubArr = nums[0..i]
                partition = i
                leftMax = globalMax
        return partition + 1
