C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //Recursive solution
  
  vector<TreeNode*> help(int start,int end){
       if(start>end){
           //return NULL;
          vector<TreeNode*> ans;
           ans.push_back(NULL);
           return ans;
       }
        
       vector<TreeNode*> ans;
       for(int i=start;i<=end;i++){
           //TreeNode* root = new TreeNode(i);
           vector<TreeNode*> left = help(start,i-1);
           vector<TreeNode*> right = help(i+1,end);
           for(TreeNode* l:left){
               for(TreeNode* r:right){
                   TreeNode* root = new TreeNode(i);
                   root->left = l;
                   root->right = r;
                   ans.push_back(root);
               }
           }
       }
       
       return ans;
   }
   
   vector<TreeNode*> generateTrees(int n) {
       return help(1,n);
   }
};

or

class Solution {
public:
   //with dp using unordered_map
   
   vector<TreeNode*> help(int start,int end,unordered_map<int,vector<TreeNode*>> &dp){
       if(start>end){
           //return NULL;
          vector<TreeNode*> ans;
           ans.push_back(NULL);
           return ans;
       }
       
       int x = start*10+end;
       
       if(dp.count(x))
           return dp[x];
        
       vector<TreeNode*> ans;
       for(int i=start;i<=end;i++){
           //TreeNode* root = new TreeNode(i);
           vector<TreeNode*> left = help(start,i-1,dp);
           vector<TreeNode*> right = help(i+1,end,dp);
           for(TreeNode* l:left){
               for(TreeNode* r:right){
                   TreeNode* root = new TreeNode(i);
                   root->left = l;
                   root->right = r;
                   ans.push_back(root);
               }
           }
       }
       
       dp[x] = ans;
       return ans;
   }
   
   
   vector<TreeNode*> generateTrees(int n) {
      // vector<vector<TreeNode*>> dp(n+1,vector<TreeNode*>(n+1,NULL));
      // unordered_map<pair<int,int>,vector<TreeNode*>> dp;
       unordered_map<int,vector<TreeNode*>> dp;
       return help(1,n,dp);
   }
};

or

class Solution {
public:
    //with dp using ordered_map
    vector<TreeNode*> help(int start,int end,map<pair<int,int>,vector<TreeNode*>> &dp){
        if(start>end){
            //return NULL;
           vector<TreeNode*> ans;
            ans.push_back(NULL);
            return ans;
        }
        
        if(dp.count({start,end}))
            return dp[{start,end}];
         
        vector<TreeNode*> ans;
        for(int i=start;i<=end;i++){
            //TreeNode* root = new TreeNode(i);
            vector<TreeNode*> left = help(start,i-1,dp);
            vector<TreeNode*> right = help(i+1,end,dp);
            for(TreeNode* l:left){
                for(TreeNode* r:right){
                    TreeNode* root = new TreeNode(i);
                    root->left = l;
                    root->right = r;
                    ans.push_back(root);
                }
            }
        }
        
        dp[{start,end}] = ans;
        return ans;
    }
    
    vector<TreeNode*> generateTrees(int n) {
       // vector<vector<TreeNode*>> dp(n+1,vector<TreeNode*>(n+1,NULL));
       map<pair<int,int>,vector<TreeNode*>> dp;
       
        return help(1,n,dp);
    }
};

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
	return generateTrees(1, n);
}

public List<TreeNode> generateTrees(int start, int end) {
	var trees = new ArrayList<TreeNode>();
	if (start > end)
		trees.add(null);

	for (var i = start; i <= end; i++) {
		// make i as root of the tree
		var leftSubtrees = generateTrees(start, i - 1);
		var rightSubtrees = generateTrees(i + 1, end);
		for (var leftSubtree : leftSubtrees) {
			for (var rightSubtree : rightSubtrees) {
				var root = new TreeNode(i);
				root.left = leftSubtree;
				root.right = rightSubtree;
				trees.add(root);
			}
		}
	}
	return trees;
}
}

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:
        @lru_cache(None)
        def dfs(left, right):
            if left > right: return [None]
            if left == right: return [TreeNode(left)]
            ans = []
            for root in range(left, right+1):
                leftNodes = dfs(left, root - 1)
                rightNodes = dfs(root+1, right)
                for leftNode in leftNodes:
                    for rightNode in rightNodes:
                        rootNode = TreeNode(root, leftNode, rightNode)
                        ans.append(rootNode)
            return ans
        
        return dfs(1, n)
