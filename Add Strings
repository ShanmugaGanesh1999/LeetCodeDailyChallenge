Python

class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        return str(int(num1)+int(num2))

or

class Solution:
    def addStrings(self, num1: str, num2: str) -> str:
        ans = []
        i1, i2 = len(num1) - 1, len(num2) - 1
        carry = 0
        while i1 >= 0 or i2 >= 0 or carry > 0:
            if i1 >= 0:
                carry += ord(num1[i1]) - ord('0')
                i1 -= 1
            if i2 >= 0:
                carry += ord(num2[i2]) - ord('0')
                i2 -= 1
            ans.append(chr(carry % 10 + ord('0')))
            carry //= 10
        return "".join(ans)[::-1]
        
        
Java

class Solution {
    public String addStrings(String num1, String num2) {
        StringBuilder result = new StringBuilder();
        final int N = Math.max(num1.length(), num2.length());
        int memory = 0;
        for (int i = 0; i < N; i++) {
            int current = memory;
            memory = 0;
            if (i < num1.length()) {
                current += (int) num1.charAt(num1.length() - i - 1) - 48;
            }
            if (i < num2.length()) {
                current += (int) num2.charAt(num2.length() - i - 1) - 48;
            }
            if (current > 9) {
                memory = current / 10;
                current %= 10;
            }
            result.append(current);
        }
        if (memory > 0) {
            result.append(memory);
        }
        return result.reverse().toString();
    }
}


C++

class Solution {
public:
    string addStrings(string num1, string num2) {
        string ans = "";
        int i1 = num1.size() - 1, i2 = num2.size() - 1, carry = 0;
        while (i1 >= 0 || i2 >= 0 || carry > 0) {
            if (i1 >= 0) {
                carry += num1[i1] - '0';
                i1 -= 1;
            }
            if (i2 >= 0) {
                carry += num2[i2] - '0';
                i2 -= 1;
            }
            ans += char(carry % 10 + '0');
            carry /= 10;
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};


Go

func PadZero(a string, n int) string {
    if n <= len(a) {
        return a
    }
    padding := strings.Repeat("0", n - len(a))
    return padding + a
}

func max(a, b int) int {
    if a > b { return a }
    return b
}

func addStrings(num1 string, num2 string) string {
    n := max(len(num1), len(num2))
    num1 = PadZero(num1, n)
    num2 = PadZero(num2, n)
    
    ret := make([]byte, n + 1)
    sum, carry := 0, 0
    for i := len(num1) - 1; i >= 0; i-- {
        num := int(num1[i] - '0' + num2[i] - '0')
        sum = carry + num % 10
        ret[i + 1] = byte(sum % 10) + '0'
        sum, carry = 0, sum / 10 + num / 10
    }

    if carry > 0 {
        ret[0] = byte(carry + '0')
        return string(ret)
    }
    
    return string(ret[1:]) 
}
