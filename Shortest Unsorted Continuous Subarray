// java

public int findUnsortedSubarray(int[] nums) {
        int lo = -1, hi = nums.length - 1;
        
// iterate backwards, every number num[i] should be <= num[i+1], num[i+2], ...
// if nums[i] > mn number, then its not in sorted place -> lo = i
		
        int mn = Integer.MAX_VALUE;
        for(int i=nums.length - 1; i>=0; i--) {
            mn = Math.min(mn, nums[i]);
            if(nums[i] > mn)
                lo = i;
        }
// going forward, same logic, every number should be bigger than all prev numbers
// if nums[i] < mx, then its not in sorted place -> hi = i
        int mx = Integer.MIN_VALUE;
        for(int i=0; i<nums.length; i++) {
            mx = Math.max(mx, nums[i]);
            if(nums[i] < mx)
                hi = i;
        }
        
		// if lo didn't change, then every number is smaller than next ones, which its sorted array. return 0
        return lo == -1 ? 0 : hi - lo + 1;
}

# python

class Solution:
    def findUnsortedSubarray(self, nums: List[int]) -> int:
        l,r = 0,len(nums)-1
        while(l<len(nums)-1 and nums[l]<=nums[l+1]):
            l+=1
        if(l==len(nums)-1):return 0
        while(r>0 and nums[r]>=nums[r-1]):
            r-=1
        Min,Max = min(nums[l:r+1]),max(nums[l:r+1])
        return (bisect_left(nums[r:],Max)+r)-(bisect_right(nums[:l],Min))
        
