C++

class MinStack {
	public:
		stack<int>s;
		multiset<int>m;   

		void push(int val) {//insert elements on both set and stack
			s.push(val); 
			m.insert(val);
		}

		void pop() {//poping elements on both set and stack
			int top = s.top();
			s.pop();
			m.erase(m.find(top)); 
		}

		int top() { //return stack top
			return s.top();
		}

		int getMin() {// return set first element 
			return *m.begin();
		}
	};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
  
  or
  
  class MinStack {
	public:
		stack<int>s,minKeeper;
		void push(int val) {
			s.push(val); // push val in stack

			if(minKeeper.size()==0||val<=minKeeper.top()){//push in when empty or lesser than current minElement
				minKeeper.push(val);
			}
		}

		void pop() {

			if(minKeeper.top() == s.top())//pop when last element was min element 
				minKeeper.pop();
			s.pop();
		}

		int top() {//return top of stack
			return s.top();
		}

		int getMin() {//return top of minKeeper
			return minKeeper.top();
		}
	};
  
  or
  
  class MinStack {
	public:
		stack<int>s;
		int minElement = INT_MAX;//initalize with max value

		void push(int val) {
			if(minElement>=val){// whenever val is lesser than current minElement, store current minElement in stack and make val as current minElement
				s.push(minElement);
				 minElement = val;
			}
			  s.push(val);
		}

		void pop() {
			if(minElement==s.top()){//top is minElement then previous element will be previous minElement, so pop and store current top as current MinElement
				s.pop();
				minElement = s.top();
			}
			s.pop();
		}

		int top() {// return stack top
			return s.top();
		}

		int getMin() {//return minElement
			return minElement;
		}
	};
  
  Java
  
  class MinStack {
    
    Stack<Integer> stack;
    int min;
    public MinStack() {
        stack=new Stack<>();
    }
    
    public void push(int val) {
        if(stack.size()==0){
            min=val;
            stack.push(val);
            stack.push(val);
        }
        else{
        min=Math.min(min,val);
        stack.push(min);
        stack.push(val);
        }
    }
    
    public void pop() {
        stack.pop();
       int val= stack.pop();
        if(val==min&&stack.size()!=0){
            int a=stack.pop();
            min=stack.pop();
            stack.push(min);
            stack.push(a);
        }
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int getMin() {
        int a=stack.pop();
        int b=stack.pop();
        stack.push(b);
        stack.push(a);
        return b;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */

Python

class MinStack:
    def __init__(self):
        self.stack_main = []
        self.stack_min = []
        
    def push(self, x):
        self.stack_main.append(x)
        if not self.stack_min or self.stack_min[-1] >= x:
            self.stack_min.append(x)

    def pop(self):
        last = self.stack_main.pop()
        if last == self.stack_min[-1]:
            self.stack_min.pop()

    def top(self):
        return self.stack_main[-1]

    def getMin(self):
        return self.stack_min[-1]

# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
