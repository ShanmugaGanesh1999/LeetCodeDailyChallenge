C++

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        if(!root) return 0;
        int height_left=0, height_right=0;
        TreeNode * tr=root, *tl=root;
        while(tr){tr=tr->right; ++height_right;}
        while(tl){tl=tl->left; ++height_left;}
        // cout<<height_left<<" "<<height_right<<"\n";
        if(height_left==height_right) return pow(2,height_right)-1;
        return 1+countNodes(root->left)+countNodes(root->right);
        
    }
};

Java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int heightOfLeftTreeSide(TreeNode root)
    {
        if(root==null)
            return 0;
        return 1+heightOfLeftTreeSide(root.left);
    }
    int heightOfRightTreeSide(TreeNode root)
    {
        if(root==null)
            return 0;
        return 1+heightOfRightTreeSide(root.right);
    }
    public int countNodes(TreeNode root) {
        
        if(root==null)
            return 0;
        int lef=heightOfLeftTreeSide(root.left);
        int rig=heightOfRightTreeSide(root.right);
        if(lef==rig)
            return 2*((int)Math.pow(2,lef)-1)+1;
        return countNodes(root.left)+countNodes(root.right)+1;
    }
}

or

class Solution {
    
    int height(TreeNode root, boolean left)
    {
        if(root==null)
            return 0;
        if(left)
            return 1+height(root.left,true);
        else
            return 1+height(root.right,false);
    }
    public int countNodes(TreeNode root) {
        
        if(root==null)
            return 0;
        int lef=height(root.left,true);
        int rig=height(root.right,false);
        if(lef==rig)
            return 2*((int)Math.pow(2,lef)-1)+1;
        return countNodes(root.left)+countNodes(root.right)+1;
    }
}

Python

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def countNodes(self, root: Optional[TreeNode]) -> int:
        if root:
            return 1 + self.countNodes(root.left) + self.countNodes(root.right)
        return 0
