C++

class Solution {
public:
    int DIR[5] = {0, 1, 0, -1, 0};
    int islandPerimeter(vector<vector<int>>& grid) {
        int row = grid.size(), col = grid[0].size(), perimeter = 0;
        for (int r = 0; r < row; ++r) {
            for (int c = 0; c < col; ++c) {
                if (grid[r][c] == 0) continue; // Skip water cell
                perimeter += 4;
                for (int i = 0; i < 4; ++i) {
                    int nr = r + DIR[i], nc = c + DIR[i+1];
                    if (nr < 0 || nr == row || nc < 0 || nc == col || grid[nr][nc] == 0) continue;
                    perimeter -= 1;
                }
            }
        }
        return perimeter;
    }
};

Java

class Solution {
    public int islandPerimeter(int[][] grid) {
        if(grid == null || grid.length == 0)    return 0;
        int perimeter = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){
                    perimeter += 4;
                    if(i > 0 && grid[i-1][j] == 1){
                        perimeter -= 2;
                    }
                    if(j > 0 && grid[i][j-1] == 1){
                        perimeter -= 2;
                    }
                }
            }
        }
        return perimeter;
    }
}

Python

class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        row, col = len(grid), len(grid[0])
        DIR = [0, 1, 0, -1, 0]
        perimeter = 0

        for r in range(row):
            for c in range(col):
                if grid[r][c] == 0: continue
                perimeter += 4
                for i in range(4):
                    nr, nc = r + DIR[i], c + DIR[i + 1]
                    if nr < 0 or nr == row or nc < 0 or nc == col or grid[nr][nc] == 0: continue
                    perimeter -= 1
        return perimeter
