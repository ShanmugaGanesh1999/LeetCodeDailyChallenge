class Solution:
    def maxProduct(self, words):
        d, ans = defaultdict(int), 0
        for word in words:
            for l in word:
                d[word] |= 1<<(ord(l) - 97)
                
        for w1, w2 in combinations(d.keys(), 2):
            if d[w1] & d[w2] == 0: 
                ans = max(ans, len(w1)*len(w2))
                
        return ans
        
class Solution:
    def maxProduct(self, words: List[str]) -> int:
        def common(chars1, chars2):
            for c1, c2 in zip(chars1, chars2):
                if c1 and c2: return True
            return False
        chars, ans = [[False]*26 for i in range(len(words))], 0
        for i, word in enumerate(words):
            for ch in word:
                chars[i][ord(ch) - ord('a')] = True
            for j in range(i):
                if not common(chars[i], chars[j]):
                    ans = max(ans, len(words[i]) * len(words[j]))
        return ans
        
class Solution {
    public int maxProduct(String[] words) {
        int max = 0;
        int[] mask = new int[words.length];
        
        for(int i = 0; i < words.length; i++){
            for(int j = 0; j < words[i].length(); j++){
                mask[i] = (mask[i] | (1 << (words[i].charAt(j) - 'a')));
            }
        }
        for(int i = 0; i < words.length; i++){
            for(int j = i + 1; j < words.length; j++){
                if((mask[i] & mask[j]) == 0)max = Math.max(max, words[i].length() * words[j].length());
            }
        }
        return max;
    }
}

class Solution {
public:
    int maxProduct(vector<string>& words) {
	int n = size(words), ans = 0;
	vector<bitset<26> > chars(n);
	for(int i = 0; i < n; i++) {
		for(auto& ch : words[i])  // map the letters to 1 if it occurs in the word
			chars[i][ch - 'a'] = 1;
		// now check with all other words and if there's no common letter, then update ans	
		for(int j = 0; j < i; j++)
			if(!checkCommon(chars[i], chars[j])) 
				ans = max(ans, int(size(words[i]) * size(words[j])));
	}   
	return ans;
}
// Returns true if there's a common letter between bitset of two words
bool checkCommon(bitset<26>& a, bitset<26>& b) {
	for(int i = 0; i < 26; i++) if (a[i] && b[i]) return true;
	return false;
}
};
